[{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ngreifer.github.io/simbased/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ngreifer.github.io/simbased/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noah Greifer. Author, maintainer.","code":""},{"path":"https://ngreifer.github.io/simbased/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greifer N (2022). simbased: Simulation-Based Inference Regression Models. https://github.com/ngreifer/simbased, https://ngreifer.github.io/simbased/.","code":"@Manual{,   title = {simbased: Simulation-Based Inference for Regression Models},   author = {Noah Greifer},   year = {2022},   note = {https://github.com/ngreifer/simbased, https://ngreifer.github.io/simbased/}, }"},{"path":"https://ngreifer.github.io/simbased/index.html","id":"simbased-simulation-based-inference-for-regression-models","dir":"","previous_headings":"","what":"Simulation-Based Inference for Regression Models","title":"Simulation-Based Inference for Regression Models","text":"simbased implements simulation-based inference alternative delta method computing functions model parameters, average marginal effects.","code":""},{"path":"https://ngreifer.github.io/simbased/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation-Based Inference for Regression Models","text":"can install development version simbased GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ngreifer/simbased\")"},{"path":"https://ngreifer.github.io/simbased/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Simulation-Based Inference for Regression Models","text":"Simulation-based inference alternative delta method bootstrapping performing inference quantities functions model parameters. delta method involves multiple assumptions: 1) regression coefficients normally distributed, 2) resulting quantity interest normally distributed, 3) first-order approximation variance desired estimator equal true variance. assumptions incorrect, especially likely quantity interest complicated nonlinear function model coefficients, resulting inferences can inaccurate. Bootstrapping one solution problem require assumptions valid nonparametric inference; however, computationally intensive since original model needs fit many times, problems model apparent bootstrap samples (e.g., failure converge, perfect prediction) can make using bootstrapping challenging. Simulation-based inference provides compromise two methods: accurate delta method require assumptions 2) 3), faster stable bootstrapping model needs fit . Simulation-based inference involves simulating model coefficients multivariate distribution using estimated values covariance single model fit original data, computing quantities interest set model coefficients, performing inference using resulting distribution estimates sampling distribution. Confidence intervals can computed using percentiles resulting sampling distribution, p-values can computed inverting confidence intervals. Alternatively, resulting sampling distribution normally distributed, standard error can estimated standard deviation estimates normal-theory confidence intervals p-values can computed. simbased package designed provide simple, general interface simulation-based inference, along convenience functions perform common tasks like computing average marginal effects. primary functions simbased sim(), sim_apply(), summary(), plot(). work together create simple workflow simulation-based inference. sim() simulates model parameters fitted model sim_apply() applies estimator simulated coefficients, original object new coefficients inserted summary() produces confidence intervals p-values resulting estimates plot() produces plots simulated sampling distribution resulting estimates also wrappers sim_apply() performing common operations: sim_ame() computes average marginal effect variable, mirroring marginaleffects::comparisons() marginaleffects::marginaleffects(); sim_setx() computes predicted values typical values covariates differences , mirroring Zelig::setx() Zelig::setx1().","code":""},{"path":"https://ngreifer.github.io/simbased/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simulation-Based Inference for Regression Models","text":"example performing g-computation ATT logistic regression compute marginal log risk ratio confidence interval:  simbased provides shortcut computing average marginal effects comparisons average adjusted predictions, sim_ame(), essentially wrapper sim_apply() extra processing. can compute log marginal risk ratio : used marginaleffects, uses delta method instead: plot simulated sampling distribution indicates sampling distribution log risk ratio normally distributed around estimate, indicating delta method may poor approximation asymmetric confidence intervals produced using simulation may valid. want compute marginal risk ratio, can using transform() already-produced output: can also use simbased compute predictions first differences set typical values predictors, mimicking functionality Zelig’s setx() setx1() functions, using sim_setx():  simbased offers parallel processing estimation functions speed computation. methodology simulation-based inference described King, Tomz, Wittenberg (2000). King, G., Tomz, M., & Wittenberg, J. (2000). Making Statistical Analyses: Improving Interpretation Presentation. American Journal Political Science, 44(2), 347–361. https://doi.org/10.2307/2669316","code":"library(simbased)  data(\"lalonde\", package = \"MatchIt\")  #Fit the model fit <- glm(I(re78 == 0) ~ treat * (age + educ + race + married + nodegree + re74 + re75),            data = lalonde, family = binomial)  #Simulate coefficients from a multivariate normal distribution set.seed(123) sim_coefs <- sim(fit)  #Apply a function that estimate the g-computation estimate for the ATT #to models with the estimated coefficients replaced by the simulated ones sim_est <- sim_apply(sim_coefs, function(fit) {   d <- subset(lalonde, treat == 1)   d$treat <- 1   p1 <- mean(predict(fit, newdata = d, type = \"response\"))   d$treat <- 0   p0 <- mean(predict(fit, newdata = d, type = \"response\"))   c(`E[Y(0)]` = p0, `E[Y(1)]` = p1, `log(RR)` = log(p1 / p0)) }, verbose = FALSE)  sim_est #> A `simbased_est` object (from `sim_apply()`) #>  - 1000 simulated values #>  - 3 quantities estimated: #>    E[Y(0)]    E[Y(1)]    log(RR)  #>  0.2944381  0.2432432 -0.1910068  #View the estimates, confidence intervals, and p-values summary(sim_est, null = c(NA, NA, 0)) #>         Estimate CI 2.5 % CI 97.5 % P-value #> E[Y(0)]    0.294    0.220     0.388       . #> E[Y(1)]    0.243    0.209     0.364       . #> log(RR)   -0.191   -0.437     0.344    0.79  #Plot the resulting sampling distributions plot(sim_est) # Marginal risk ratio ATT, simulation-based sim_est <- sim_ame(sim_coefs, var = \"treat\", subset = treat == 1,                    contrast = \"log(RR)\", verbose = FALSE)  sim_est #> A `simbased_est` object (from `sim_ame()`) #>  - Average marginal effect of `treat` #>  - 1000 simulated values #>  - 3 quantities estimated: #>    E[Y(0)]    E[Y(1)]    log(RR)  #>  0.2944381  0.2432432 -0.1910068  summary(sim_est, null = c(NA, NA, 0)) #>         Estimate CI 2.5 % CI 97.5 % P-value #> E[Y(0)]    0.294    0.220     0.388       . #> E[Y(1)]    0.243    0.209     0.364       . #> log(RR)   -0.191   -0.437     0.344    0.79 # Marginal risk ratio ATT, delta method-based marginaleffects::comparisons(fit, variables = list(treat = 0:1),                              newdata = subset(lalonde, treat == 1),                              transform_pre = \"lnratioavg\") |>   summary() #>    Term              Contrast Effect Std. Error z value Pr(>|z|)   2.5 % 97.5 % #> 1 treat ln(mean(1) / mean(0)) -0.191     0.1925  -0.992  0.32119 -0.5684 0.1864 #>  #> Model type:  glm  #> Prediction type:  response #Transform estimates into new quantities of interest sim_est <- transform(sim_est, `RR` = exp(`log(RR)`)) summary(sim_est, null = c(NA, NA, 0, 1)) #>         Estimate CI 2.5 % CI 97.5 % P-value #> E[Y(0)]    0.294    0.220     0.388       . #> E[Y(1)]    0.243    0.209     0.364       . #> log(RR)   -0.191   -0.437     0.344    0.79 #> RR         0.826    0.646     1.411    0.79 # Predictions across age and treat at typical values # of the other predictors sim_est <- sim_setx(sim_coefs, x = list(age = 20:50, treat = 0:1),                     verbose = FALSE)  #Plot of predicted values across age for each value of treat plot(sim_est)"},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of simulated estimates — plot.simbased_est","title":"Plot distribution of simulated estimates — plot.simbased_est","text":"plot() plots distribution simulated estimates density plot.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of simulated estimates — plot.simbased_est","text":"","code":"# S3 method for simbased_est plot(x, est, ci = TRUE, alpha = 0.05, normal = FALSE, ...)"},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of simulated estimates — plot.simbased_est","text":"x simbased_est object; output call sim_apply(). est vector names indices estimates plot. unspecified, estimates plotted. ci logical; whether display confidence interval limits estimates. Default TRUE. alpha \\(\\alpha\\) used compute confidence interval. Default .05 95% confidence intervals. normal logical; whether compute confidence intervals using normal approximation (TRUE) simulated sampling distribution (FALSE; default). See summary.simbased_est() details. ... ignored.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of simulated estimates — plot.simbased_est","text":"ggplot object.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot distribution of simulated estimates — plot.simbased_est","text":"plots produced using ggplot2::geom_density().","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal predictions from sim_setx() — plot.simbased_setx","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"plot.simbased_sext() plots output sim_setx(), providing graphics similar plot.simbased_est() features specifically plot marginal predictions. continues predictors, plot marginal predictions confidence bands across levels predictor. Otherwise, plot simulated sampling distribution marginal predictions.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"","code":"# S3 method for simbased_setx plot(x, var = NULL, ci = TRUE, alpha = 0.05, normal = FALSE, ...)"},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"x simbased_est object resulting call sim_setx(). var name focal varying predictor, .e., variable x-axis plot. variables varying set values used color resulting plot. See Details. Ignored predictors vary predictor varies reference grid x1 specified sim_setx(). set, use predictor greatest number unique values specified reference grid. ci logical; whether display confidence interval limits estimates. Default TRUE. alpha \\(\\alpha\\) used compute confidence interval. Default .05 95% confidence intervals. normal logical; whether compute confidence intervals using normal approximation (TRUE) simulated sampling distribution (FALSE; default). See summary.simbased_est() details. ... ignored.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"ggplot object.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"plot() creates one two kinds plots depending reference grid specified call sim_setx() var set . focal varying predictor (.e., one set var) numeric takes three unique values reference grid, produced plot line graph displaying value marginal prediction (denoted E[Y|X]) across values focal varying predictor, confidence bands displayed ci = TRUE. predictors also vary, lines different values displayed different colors. plots produced using ggplot2::geom_line() ggplot2::geom_ribbon() focal varying predictor factor character takes two fewer values reference grid, produced plot density plot simulated predictions, similar plot resulting plot.simbased_est(). variables vary, densities different values displayed different colors. plots produced using ggplot2::geom_density(). Marginal predictions identified corresponding levels predictors vary. user keep track whether non-varying predictors set specified automatically set \"typical\" levels.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/plot.simbased_setx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal predictions from sim_setx() — plot.simbased_setx","text":"","code":"## See help(\"sim_sext\") for examples"},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate model coefficients — sim","title":"Simulate model coefficients — sim","text":"sim() simulates model parameters multivariate normal t distribution used sim_apply() calculate quantities interest.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate model coefficients — sim","text":"","code":"sim(fit, n = 1000, vcov = NULL, coefs = NULL, dist = NULL)"},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate model coefficients — sim","text":"fit model fit, output call lm() glm(). Can left unspecified coefs vcov functions. n number simulations run; default 1000. always better resulting calculations take longer. vcov either square covariance matrix coefficient covariance estimates function use extract fit. default, uses stats::vcov() insight::get_varcov() work. coefs either vector coefficient estimates function use extract fit. default, uses stats::coef() insight::get_parameters() work. dist string containing name multivariate distribution use draw simulated coefficients. one \"normal\" (multivariate normal distribution) \"t_{#}\" (multivariate t distribution), {#} corresponds desired degrees freedom (e.g., \"t_100\"). NULL, right distribution use determined based heuristics; see Details.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate model coefficients — sim","text":"simbased_sim object, following components: sim.coefs matrix containing simulated coefficients column coefficient row simulation coefs original coefficients extracted fit supplied coefs. vcov covariance matrix coefficients extracted fit supplied vcov fit original model fit supplied fit \"dist\" attribute contains \"normal\" coefficients sampled multivariate normal distribution \"t\" sampled multivariate t distribution. \"simbased_hash\" attribute contains unique hash generated rlang::hash().","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate model coefficients — sim","text":"dist NULL, sim() samples multivariate normal t distribution depending whether df.residual(fit) NULL . NULL fit unspecified, multivariate normal distribution used. Otherwise (primarily linear models fit lm()), multivariate t distribution used, df.residual(fit) used degrees freedom. multivariate normal used, sampled means equal estimated coefficients parameter covariance matrix covariance matrix using mvnfast::rmvn(). multivariate t distribution used, sampled means equal estimated coefficients scaling matrix equal cov*(df - 2)/df, cov parameter covariance matrix df residual degrees freedom model, using mvnfast::rmvt().","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate model coefficients — sim","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- lm(re78 ~ treat * (age + race + nodegree + re74), data = lalonde)  # Simulate coefficients s <- sim(fit) s #> A `simbased_sim` object #>  - 12 coefficients, 1000 simulated values #>  - sampled distribution: multivariate t(602) #>  - original fitting function call: #>  #> lm(formula = re78 ~ treat * (age + race + nodegree + re74), data = lalonde)  ## Could also use a robust covariance matrix, e.g., # s <- sim(fit, vcov = sandwich::vcovHC)  # Simulated coefficients assuming a normal distribution # for coefficients; default for `lm` objects is a t- # distribution s <- sim(fit, dist = \"normal\") s #> A `simbased_sim` object #>  - 12 coefficients, 1000 simulated values #>  - sampled distribution: multivariate normal #>  - original fitting function call: #>  #> lm(formula = re78 ~ treat * (age + race + nodegree + re74), data = lalonde)"},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average marginal effects — sim_ame","title":"Compute average marginal effects — sim_ame","text":"sim_ame() wrapper sim_apply() computes average marginal effects, average effect changing single variable one value another (.e., one category another categorical variables tiny change continuous variables).","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average marginal effects — sim_ame","text":"","code":"sim_ame(   sim,   var,   subset = NULL,   contrast = NULL,   eps = 1e-05,   verbose = TRUE,   cl = NULL )"},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average marginal effects — sim_ame","text":"sim simbased_sim object; output call sim() simmi(). var either name variable marginal effects computed named list length one containing values variable take. list supplied named variables categorical (factor, character, two values), categorical calculations triggered. Otherwise, continuous calculations triggered. See Details. subset optional; vector used subset data used compute marginal effects. evaluated within original dataset used fit model using subset(), nonstandard evaluation allowed. contrast string containing name contrast average marginal means variable named var categorical takes two values. Allowed options include \"diff\" difference means (also \"rd\"), \"rr\" risk ratio (also \"irr\"), \"log(rr): log risk ratio (also \"log(irr)\"), \"\" odds ratio, \"log()\" log odds ratio, \"nnt\" number needed treat. options case sensitive, parentheses must included present. eps variable named var continuous, value change variable values approximate derivative. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute average marginal effects — sim_ame","text":"simbased_ame object, inherits simbased_est similar output sim_apply(), additional attribute \"var\" containing variable named var. average marginal means named E[Y({v})], {v} replaced values focal variable (var) takes . average marginal effect continuous var named dY/d({x}) {x} replaced var.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute average marginal effects — sim_ame","text":"sim_ame() operates differently depending whether continuous categorical calculations triggered. trigger categorical calculations, var string naming factor, character, binary variable named list specific values given (e.g., var = list(x1 = c(1, 2 ,3))). Otherwise, continuous calculations triggered. Categorical calculations involve computing average marginal means level var. average marginal mean average predicted outcome value setting units' value var one level. (quantity several names, including average potential outcome, average adjusted prediction, standardized mean). var takes two levels (supplied list two values specified), contrast average marginal means can computed supplying argument contrast. Contrasts can manually computed using transform() afterward well. Continuous calculations involve computing average marginal effects var across units. marginal effect instantaneous rate change corresponding changing unit's observed value var tiny amount considering degree predicted outcome changes. ratio change predicted outcome change value var marginal effect; averaged across sample arrive average marginal effect. \"tiny amount\" used eps times standard deviation focal variable.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"effect-measures","dir":"Reference","previous_headings":"","what":"Effect measures","title":"Compute average marginal effects — sim_ame","text":"effect measures specified contrast defined . Typically \"diff\" appropriate continuous outcomes \"diff\" \"irr\" appropriate count outcomes; rest appropriate binary outcomes. focal variable two levels, 0 1, outcome Y, average marginal means denoted formulas E[Y(0)] E[Y(1)], respectively. log(.) versions defined taking log() (natural log) corresponding effect measure.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/sim_ame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute average marginal effects — sim_ame","text":"","code":"data(\"lalonde\", package = \"MatchIt\")  # Fit the model fit <- glm(I(re78 > 0) ~ treat + age + race + re74,            data = lalonde, family = binomial)  # Simulate coefficients set.seed(123) s <- sim(fit, n = 100)  # Average marginal effect of `age` est <- sim_ame(s, var = \"age\", verbose = FALSE) summary(est) #>           Estimate CI 2.5 % CI 97.5 % #> dY/d(age) -0.00678 -0.00991  -0.00367  # Contrast between average marginal means for `treat` est <- sim_ame(s, var = \"treat\", contrast = \"rr\",                verbose = FALSE) summary(est) #>         Estimate CI 2.5 % CI 97.5 % #> E[Y(0)]    0.744    0.703     0.782 #> E[Y(1)]    0.809    0.756     0.869 #> RR         1.088    0.989     1.199  # Average marginal means for `race`; need to follow up # with contrasts for specific levels est <- sim_ame(s, var = \"race\", verbose = FALSE)  est <- transform(est,                  `RR(h,b)` = `E[Y(hispan)]` / `E[Y(black)]`)  summary(est) #>              Estimate CI 2.5 % CI 97.5 % #> E[Y(black)]     0.704    0.637     0.765 #> E[Y(hispan)]    0.832    0.749     0.900 #> E[Y(white)]     0.800    0.754     0.840 #> RR(h,b)         1.181    1.051     1.341"},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to simulated parameter values — sim_apply","title":"Apply a function to simulated parameter values — sim_apply","text":"sim_apply() applies function produces quantities interest set simulated coefficients produced sim(); calculated quantities form posterior sampling distribution quantities interest. Capabilities available parallelization.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to simulated parameter values — sim_apply","text":"","code":"sim_apply(sim, FUN, verbose = TRUE, cl = NULL, ...)"},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to simulated parameter values — sim_apply","text":"sim simbased_sim object; output call sim() simmi(). FUN function applied set simulated coefficients. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place. ... optional arguments passed FUN.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to simulated parameter values — sim_apply","text":"simbased_est object, matrix column estimated quantity row simulation. original estimates (FUN applied original coefficients model fit object) stored attribute \"original\". \"sim_hash\" attributes contained simulation hash produced sim().","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to simulated parameter values — sim_apply","text":"sim_apply() applies function, FUN, set simulated coefficients, similar apply(). function return numeric vector containing one estimated quantities. named vector easily keep track meaning estimated quantity. Care taken ensure returned vector length time FUN called. NAs allowed output avoided possible. arguments FUN can specified ways. FUN argument called coefs, simulated set coefficients passed argument, FUN compute return quantity based coefficients (e.g., difference two coefficients one wants test whether two coefficients equal). FUN argument called fit, model fit object type one originally supplied sim() (e.g., lm glm object) passed argument, coefficients fit object replaced simulated coefficients generated sim(), FUN compute return quantity based model fit (e.g., computation based output predict()). neither coefs fit names arguments FUN, model fit object replaced coefficients supplied first argument FUN. custom coefficients supplied sim(), .e., coefs argument sim() left default value, FUN must accept coefs argument warning thrown accepts fit argument. sim_apply() know reconstruct original fit object new coefficients inserted. quantities computed sim_apply() must therefore computed directly coefficients.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"sim-apply-with-multiply-imputed-data","dir":"Reference","previous_headings":"","what":"sim_apply() with multiply imputed data","title":"Apply a function to simulated parameter values — sim_apply","text":"using simmi() sim_apply() multiply imputed data, coefficients supplied model fit corresponding imputation identifier associated set coefficients, means FUN uses dataset extracted model, model fit corresponding imputation. original estimates (see Value ) computed average estimates across imputed datasets using original coefficients (.e., value computed using Rubin's pooling rules). Although simulation distribution confidence intervals valid regardless normality estimator, original estimate valid estimates can averaged across imputations. example, odds ratio, non-normally distributed, original estimate invalid; however, log odds ratio, likely normally distributed, valid statistic pool across imputations, transform() can used compute odds ratio.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/sim_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to simulated parameter values — sim_apply","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- lm(re78 ~ treat + age + race + nodegree + re74,           data = lalonde) coef(fit) #>   (Intercept)         treat           age    racehispan     racewhite  #>  4596.7282858  1719.6323705    -6.5455292  1605.6558582  1338.9751895  #>      nodegree          re74  #> -1174.9861400     0.3855893   set.seed(123) s <- sim(fit, n = 100)  # Function to compare predicted values for two units # using `fit` argument sim_fun <- function(fit) {   pred1 <- unname(predict(fit, newdata = lalonde[1,]))   pred2 <- unname(predict(fit, newdata = lalonde[2,]))   c(pred1 = pred1, pred2 = pred2) }  est <- sim_apply(s, sim_fun, verbose = FALSE)  # Add difference between predicted values as # additional quantity est <- transform(est, `diff 1-2` = pred1 - pred2)  # Examine estimates and confidence intervals summary(est) #>          Estimate CI 2.5 % CI 97.5 % #> pred1        4899     3847      6183 #> pred2        6603     5042      8976 #> diff 1-2    -1704    -3594       258  # Function to compare coefficients using `coefs` # argument sim_fun <- function(coefs) {   c(`wh - his` = coefs[\"racewhite\"] - coefs[\"racehispan\"]) }  est <- sim_apply(s, sim_fun, verbose = FALSE)  # Examine estimates and confidence intervals summary(est) #>                    Estimate CI 2.5 % CI 97.5 % #> wh - his.racewhite     -267    -1857      1612"},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute predictions and first differences at set values — sim_setx","title":"Compute predictions and first differences at set values — sim_setx","text":"sim_setx() wrapper sim_apply() computes predicted values outcome specified values predictors, sometimes called marginal predictions. One can also compute difference two marginal predictions (\"first difference\"). Although function accepted simbased_est objects can used sim_setx() output objects, special plotting function, plot.simbased_setx(), can used plot marginal predictions.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute predictions and first differences at set values — sim_setx","text":"","code":"sim_setx(sim, x = list(), x1 = list(), verbose = TRUE, cl = NULL)"},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute predictions and first differences at set values — sim_setx","text":"sim simbased_sim object; output call sim() simmi(). x named list values predictor take defining reference grid predictor values, e.g., list(v1 = 1:4, v2 = c(\"\", \"B\")). omitted predictors fixed \"typical\" value. See Details. x1 specified, x identify single reference unit. x1 named list value predictor take compute first difference predictor combination specified x. x1 can identify single unit. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute predictions and first differences at set values — sim_setx","text":"simbased_setx object, inherits simbased_est similar output sim_apply(), following additional attributes: \"setx\" - data frame containing values predictions made \"fd\" - whether first difference computed; set TRUE x1 specified FALSE otherwise","code":""},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute predictions and first differences at set values — sim_setx","text":"x named list predictor values crossed form reference grid marginal predictions. predictors set x assigned \"typical\" value, , factor, character, logical, binary variables mode, numeric variables mean, ordered variables median. values can seen \"setx\" attribute output object. x empty, prediction made point corresponding typical value every predictor. Estimates identified (summary(), etc.) variables differ across predictions. x1 supplied, first difference computed, considered difference two marginal predictions. One marginal prediction must specified x another, ideally single predictor changed, specified x1.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/sim_setx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute predictions and first differences at set values — sim_setx","text":"","code":"data(\"lalonde\", package = \"MatchIt\")  fit <- lm(re78 ~ treat + age + educ + married + race + re74,           data = lalonde)  # Simulate coefficients set.seed(123) s <- sim(fit, n = 100)  # Predicted values at specified values of treat, typical # values for other predictors est <- sim_setx(s, x = list(treat = 0:1,                             re74 = c(0, 10000)),                 verbose = FALSE) summary(est) #>                         Estimate CI 2.5 % CI 97.5 % #> treat = 0, re74 = 0         4771     3600      5758 #> treat = 1, re74 = 0         6389     4706      8098 #> treat = 0, re74 = 10000     8353     6945      9464 #> treat = 1, re74 = 10000     9971     8031     11762 plot(est)   # Predicted values at specified grid of values, typical # values for other predictors est <- sim_setx(s, x = list(age = c(20, 25, 30, 35),                             married = 0:1),                 verbose = FALSE) summary(est) #>                       Estimate CI 2.5 % CI 97.5 % #> age = 20, married = 0     6377     5340      7445 #> age = 25, married = 0     6395     5313      7496 #> age = 30, married = 0     6413     5263      7507 #> age = 35, married = 0     6431     5014      7570 #> age = 20, married = 1     7066     6029      8228 #> age = 25, married = 1     7084     6146      8149 #> age = 30, married = 1     7102     6222      8078 #> age = 35, married = 1     7120     6253      8237 plot(est)   # First differences of treat at specified value of # race, typical values for other predictors est <- sim_setx(s, x = list(treat = 0, race = \"hispan\"),                 x1 = list(treat = 1, race = \"hispan\"),                 verbose = FALSE) summary(est) #>           Estimate CI 2.5 % CI 97.5 % #> treat = 0     7054     5235      8738 #> treat = 1     8672     6437     10854 #> FD            1618      215      2930 plot(est)"},{"path":"https://ngreifer.github.io/simbased/reference/simbased-package.html","id":null,"dir":"Reference","previous_headings":"","what":"simbased: Simulation-Based Inference for Regression Models — simbased-package","title":"simbased: Simulation-Based Inference for Regression Models — simbased-package","text":"Performs simulation-based inference alternative delta method obtaining valid confidence intervals p-values, especially useful resulting quantity normally distributed delta method approximation fails. framework simulation-based inference described King, Tomz, Wittenberg (2000) doi:10.2307/2669316 .","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/simbased-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simbased: Simulation-Based Inference for Regression Models — simbased-package","text":"Maintainer: Noah Greifer ngreifer@iq.harvard.edu (ORCID) [contributor]","code":""},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate model coefficients after multiple imputation — simmi","title":"Simulate model coefficients after multiple imputation — simmi","text":"simmi() simulates model parameters multivariate normal t distributions multiple imputation used sim_apply() calculate quantities interest.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate model coefficients after multiple imputation — simmi","text":"","code":"simmi(fitlist, n = 1000, vcov = NULL, coefs = NULL, dist = NULL)"},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate model coefficients after multiple imputation — simmi","text":"fitlist list model fits, one imputed dataset, mira object (output call () applied mids object mice). n number simulations run imputed dataset; default 1000. always better resulting calculations take longer. vcov square covariance matrix coefficient covariance estimates, function use extract fit, list thereof element imputed dataset. default, uses stats::vcov() insight::get_varcov() work. coefs vector coefficient estimates, function use extract fit, list thereof element imputed dataset. default, uses stats::coef() insight::get_parameters() work. dist character vector containing name multivariate distribution(s) use draw simulated coefficients. one \"normal\" (multivariate normal distribution) \"t_{#}\" (multivariate t distribution), {#} corresponds desired degrees freedom (e.g., \"t_100\"). NULL, right distributions use determined based heuristics; see sim() details.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate model coefficients after multiple imputation — simmi","text":"simbased_simmi object, inherits simbased_sim following components: sim.coefs matrix containing simulated coefficients column coefficient row simulation imputation coefs matrix containing original coefficients extracted fitlist supplied coefs, row per imputation. fit list model fits supplied fitlist imp identifier imputed dataset set simulated coefficients corresponds . \"dist\" attribute contains \"normal\" coefficients sampled multivariate normal distribution \"t({df})\" sampled multivariate t distribution. \"simbased_hash\" attribute contains unique hash generated rlang::hash().","code":""},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate model coefficients after multiple imputation — simmi","text":"simmi() essentially combines multiple sim() calls applied list model fits, fit imputed dataset, single combined pool simulated coefficients. simulation-based inference used multiply imputed data, many imputations required; see Zhou Reiter (2010).","code":""},{"path":"https://ngreifer.github.io/simbased/reference/simmi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate model coefficients after multiple imputation — simmi","text":"Zhou, X., & Reiter, J. P. (2010). Note Bayesian Inference Multiple Imputation. American Statistician, 64(2), 159–163. doi:10.1198/tast.2010.09109","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference for simbased_est objects — summary.simbased_est","title":"Inference for simbased_est objects — summary.simbased_est","text":"summary() tabulates estimates simulation-based confidence intervals (optionally) p-values simbased_est object.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference for simbased_est objects — summary.simbased_est","text":"","code":"# S3 method for simbased_est summary(object, est, alpha = 0.05, normal = FALSE, null = NA, ...)"},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference for simbased_est objects — summary.simbased_est","text":"object simbased_est object; output call sim_apply() wrappers. est vector names indices estimates plot. unspecified, estimates plotted. alpha \\(\\alpha\\) used compute confidence interval. Default .05 95% confidence intervals. normal logical; whether compute p-values confidence intervals using normal approximation (TRUE) simulated sampling distribution (FALSE; default). See Details. null values parameters null hypothesis p-value calculations. length equal number quantities estimated, one, case recycled. Set values NA omit p-values quantities. values NA, default, p-values produced. ... ignored.","code":""},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference for simbased_est objects — summary.simbased_est","text":"summary.simbased_est object, matrix containing coefficient estimates, standard errors, test statistics, p-values, confidence intervals. columns present depending arguments supplied summary().","code":""},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inference for simbased_est objects — summary.simbased_est","text":"summary() uses estimates computed original model estimates uses simulated parameters inference . normal = TRUE, standard deviation simulation estimates used standard error, used t- z- statistic confidence interval. p-values confidence intervals valid sampling distribution resulting statistic normal (can assessed using plot.simbased_est(). normal = FALSE, confidence interval calculated using alpha/2 1 - alpha/2 quantiles simulation estimates, p-value calculated twice proportion simulation estimates less greater null, whichever smaller; equivalent inverting confidence interval truly valid true sampling distribution location shift sampling distribution null hypothesis therefore interpreted caution. Using normal = FALSE (default) recommended confidence intervals valid even sampling distribution normally distributed. precision p-values confidence intervals depends number simulation requested (value n supplied sim()).","code":""},{"path":[]},{"path":"https://ngreifer.github.io/simbased/reference/summary.simbased_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference for simbased_est objects — summary.simbased_est","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- glm(I(re78 > 0) ~ treat + age + race + nodegree + re74,           data = lalonde)  s <- sim(fit, n = 100)  # Compute average marginal means for `treat` est <- sim_ame(s, var = \"treat\") #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |+                                                 | 2 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |+++                                               | 6 % ~00s             |++++                                              | 7 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |+++++                                             | 10% ~00s             |++++++                                            | 11% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |+++++++                                           | 14% ~00s             |++++++++                                          | 15% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |+++++++++                                         | 18% ~00s             |++++++++++                                        | 19% ~00s             |++++++++++                                        | 20% ~00s             |+++++++++++                                       | 21% ~00s             |+++++++++++                                       | 22% ~00s             |++++++++++++                                      | 23% ~00s             |++++++++++++                                      | 24% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |++++++++++++++                                    | 28% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |++++++++++++++++                                  | 32% ~00s             |+++++++++++++++++                                 | 33% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |++++++++++++++++++                                | 36% ~00s             |+++++++++++++++++++                               | 37% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |++++++++++++++++++++                              | 40% ~00s             |+++++++++++++++++++++                             | 41% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |++++++++++++++++++++++                            | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |+++++++++++++++++++++++                           | 46% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |++++++++++++++++++++++++                          | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |+++++++++++++++++++++++++                         | 50% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |+++++++++++++++++++++++++++                       | 54% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |+++++++++++++++++++++++++++++                     | 58% ~00s             |++++++++++++++++++++++++++++++                    | 59% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |+++++++++++++++++++++++++++++++                   | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 63% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |+++++++++++++++++++++++++++++++++                 | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 67% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |+++++++++++++++++++++++++++++++++++               | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |++++++++++++++++++++++++++++++++++++              | 72% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |+++++++++++++++++++++++++++++++++++++             | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |++++++++++++++++++++++++++++++++++++++            | 76% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 80% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 85% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 89% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 93% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 98% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s   coef(est) #>   E[Y(0)]   E[Y(1)]  #> 0.7453346 0.8175754   # Compute average marginal effects on risk difference # (RD) and risk ratio (RR) scale est <- transform(est,                  RD = `E[Y(1)]` - `E[Y(0)]`,                  RR = `E[Y(1)]` / `E[Y(0)]`)  # Compute confidence intervals and p-values, # using given null values for computing p-values summary(est, null = c(NA, NA, 0, 1)) #>         Estimate CI 2.5 % CI 97.5 % P-value #> E[Y(0)]   0.7453   0.7098    0.7836       . #> E[Y(1)]   0.8176   0.7570    0.8821       . #> RD        0.0722  -0.0178    0.1545    0.16 #> RR        1.0969   0.9768    1.2129    0.16  # Same tests using normal approximation summary(est, null = c(NA, NA, 0, 1),         normal = TRUE) #>         Estimate CI 2.5 % CI 97.5 % Std. Error Z value P-value   #> E[Y(0)]   0.7453   0.7054    0.7853     0.0204       .       .   #> E[Y(1)]   0.8176   0.7506    0.8845     0.0342       .       .   #> RD        0.0722  -0.0132    0.1576     0.0436    1.66   0.097 . #> RR        1.0969   0.9796    1.2143     0.0599    1.62   0.105   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"}]
