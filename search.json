[{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Translating Zelig to clarify","text":"document, demonstrate common uses Zelig (Imai, King, Lau 2008) tasks can performed using clarify. ’ll include examples computing predictions representative values (.e., setx() sim() Zelig), rare-events logit model, estimating average treatment effect (ATT) matching, combining estimates multiple imputation. usual workflow Zelig fit model using zelig(), specify quantities interest simulate using setx() zelig() output, simulate quantities using sim(). clarify uses similar approach, except model fit outside clarify using functions different R package. addition, clarify’s sim_apply() allows computation arbitrary quantity interest. ’ll demonstrate replicate standard Zelig analysis using clarify step--step. simulation-based inference involves randomness algorithms may perfectly align, one shouldn’t expect results identical, though cases, similar. Note Zelig clarify function called “sim()”, always make clear package’s sim() used.","code":"## library(\"Zelig\") library(\"clarify\") set.seed(100)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"predictions-at-representative-values","dir":"Articles","previous_headings":"","what":"Predictions at representative values","title":"Translating Zelig to clarify","text":"’ll use lalonde dataset MatchIt fit linear model re78 function treatment treat covariates. ’ll interested predicted values outcome typical unit level treatment first difference.","code":"data(\"lalonde\", package = \"MatchIt\")"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"zelig-workflow","dir":"Articles","previous_headings":"Predictions at representative values","what":"Zelig workflow","title":"Translating Zelig to clarify","text":"Zelig, fit model using zelig(): Next, use setx() setx1() set values treat: Next simulate values using sim(): Finally, can print plot predicted values first differences:","code":"fit <- zelig(re78 ~ treat + age + educ + married + race +                nodegree + re74 + re75, data = lalonde,              model = \"ls\", cite = FALSE) fit <- setx(fit, treat = 0) fit <- setx1(fit, treat = 1) fit <- Zelig::sim(fit) fit plot(fit)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"clarify-workflow","dir":"Articles","previous_headings":"Predictions at representative values","what":"clarify workflow","title":"Translating Zelig to clarify","text":"clarify, fit model using functions outside clarify, like stats::lm()fixest::feols(). Next, simulate model coefficients using clarify::sim(): Next, use sim_setx() set values predictors: Finally, can summarize plot predicted values:","code":"fit <- lm(re78 ~ treat + age + educ + married + race +             nodegree + re74 + re75, data = lalonde) s <- clarify::sim(fit) est <- sim_setx(s, x = list(treat = 0), x1 = list(treat = 1),                 verbose = FALSE) summary(est) #>           Estimate   2.5 %  97.5 % #> treat = 0   6686.0  5305.0  7986.6 #> treat = 1   8234.3  6416.7 10025.4 #> FD          1548.2   -18.9  3056.8  plot(est)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"rare-events-logit","dir":"Articles","previous_headings":"","what":"Rare-events logit","title":"Translating Zelig to clarify","text":"Zelig uses special method logistic regression rare events described King Zeng (2001). primary implementation method R. However, newer methods developed perform similarly better method King Zeng (Puhr et al. 2017) implemented R packages compatible clarify, logistf brglm2. , ’ll use lalonde dataset constructed rare outcome variable demonstrate perform rare events logistic regression Zelig clarify.","code":"data(\"lalonde\", package = \"MatchIt\")  #Rare outcome: 1978 earnings over $20k; ~6% prevalence lalonde$re78_20k <- lalonde$re78 >= 20000"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"zelig-workflow-1","dir":"Articles","previous_headings":"Rare-events logit","what":"Zelig workflow","title":"Translating Zelig to clarify","text":"Zelig, fit rare events logistic model using zelig() model = \"relogit\". can compute predicted values representative values using setx() Zelig::sim() .","code":"fit <- zelig(re78_20k ~ treat + age + educ + married + race +                nodegree + re74 + re75, data = lalonde,              model = \"relogit\", cite = FALSE)  fit fit <- setx(fit, treat = 0) fit <- setx1(fit, treat = 1)  fit <- Zelig::sim(fit)  fit plot(fit)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"clarify-workflow-1","dir":"Articles","previous_headings":"Rare-events logit","what":"clarify workflow","title":"Translating Zelig to clarify","text":", ’ll use logistf::logistif() flic = TRUE, performs variation Firth’s logistic regression correction bias intercept (Puhr et al. 2017). can compute predictions representative values using clarify::sim() sim_setx().","code":"fit <- logistf::logistf(re78_20k ~ treat + age + educ + married + race +                           nodegree + re74 + re75, data = lalonde,                         flic = TRUE)  summary(fit) #> logistf::logistf(formula = re78_20k ~ treat + age + educ + married +  #>     race + nodegree + re74 + re75, data = lalonde, flic = TRUE) #>  #> Model fitted by Penalized ML #> Coefficients: #>                      coef     se(coef)    lower 0.95    upper 0.95      Chisq #> (Intercept) -9.313465e+00 2.036981e+00 -1.330595e+01 -5.3209820512 24.4427501 #> treat        1.106769e+00 6.165332e-01 -1.029333e-01  2.3139987641  3.2185792 #> age          4.144350e-02 2.147498e-02 -8.432745e-04  0.0825427498  3.6937075 #> educ         2.936673e-01 1.283624e-01  4.612509e-02  0.5477908006  5.4633187 #> married      2.909164e-01 4.769332e-01 -6.309243e-01  1.2240602694  0.3844676 #> racehispan   1.056388e+00 7.276772e-01 -4.150796e-01  2.4305568008  2.0440063 #> racewhite    5.431919e-01 6.160352e-01 -6.255328e-01  1.7838676828  0.8008622 #> nodegree     2.868319e-01 5.852738e-01 -8.531608e-01  1.4243907533  0.2462839 #> re74         1.108995e-04 2.821452e-05  5.775266e-05  0.0001664918 17.0427331 #> re75         4.457916e-05 4.720736e-05 -4.706292e-05  0.0001334568  0.9472092 #>                        p method #> (Intercept) 7.655103e-07      1 #> treat       7.280680e-02      2 #> age         5.461808e-02      2 #> educ        1.941973e-02      2 #> married     5.352219e-01      2 #> racehispan  1.528067e-01      2 #> racewhite   3.708357e-01      2 #> nodegree    6.197040e-01      2 #> re74        3.654797e-05      2 #> re75        3.304307e-01      2 #>  #> Method: 1-Wald, 2-Profile penalized log-likelihood, 3-None #>  #> Likelihood ratio test=65.80085 on 9 df, p=1.007627e-10, n=614 #> Wald test = 179.4243 on 9 df, p = 0 s <- clarify::sim(fit)  est <- sim_setx(s, x = list(treat = 0), x1 = list(treat = 1),                 verbose = FALSE)  summary(est) #>           Estimate    2.5 %   97.5 % #> treat = 0  0.02341  0.00891  0.06213 #> treat = 1  0.06760  0.01972  0.22091 #> FD         0.04419 -0.00318  0.19222 plot(est)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"estimating-the-att-after-matching","dir":"Articles","previous_headings":"","what":"Estimating the ATT after matching","title":"Translating Zelig to clarify","text":"’ll use lalonde dataset perform propensity score matching fit linear model re78 function treatment treat, covariates, interaction. model, ’ll compute ATT treat using Zelig clarify.","code":"data(\"lalonde\", package = \"MatchIt\")  m.out <- MatchIt::matchit(treat ~ age + educ + married + race +                             nodegree + re74 + re75, data = lalonde,                           method = \"nearest\")"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"zelig-workflow-2","dir":"Articles","previous_headings":"Estimating the ATT after matching","what":"Zelig workflow","title":"Translating Zelig to clarify","text":"Zelig, fit model using zelig() directly matchit object: Next, use ATT() request ATT treat simulate values:","code":"fit <- zelig(re78 ~ treat * (age + educ + married + race +                                nodegree + re74 + re75),              data = m.out, model = \"ls\", cite = FALSE) fit <- ATT(fit, \"treat\") fit plot(fit)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"clarify-workflow-2","dir":"Articles","previous_headings":"Estimating the ATT after matching","what":"clarify workflow","title":"Translating Zelig to clarify","text":"clarify, need extract matched dataset fit model outside clarify using another package. Next, simulate model coefficients using clarify::sim(). performed pair matching, request cluster-robust standard error: Next, use sim_ame() request average marginal effect treat within subset treated units: Finally, can summarize plot ATT:","code":"m.data <- MatchIt::match.data(m.out)  fit <- lm(re78 ~ treat * (age + educ + married + race +                             nodegree + re74 + re75),           data = m.data) s <- clarify::sim(fit, vcov = ~subclass) est <- sim_ame(s, var = \"treat\", subset = treat == 1,                contrast = \"diff\", verbose = FALSE) summary(est) #>         Estimate 2.5 % 97.5 % #> E[Y(0)]     5228  4060   6355 #> E[Y(1)]     6349  5226   7468 #> Diff        1121  -474   2635  plot(est)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"combining-results-after-multiple-imputation","dir":"Articles","previous_headings":"","what":"Combining results after multiple imputation","title":"Translating Zelig to clarify","text":"’ll use africa dataset Amelia demonstrate combining estimates multiple imputation. analysis also demonstrated using clarify end vignette(\"clarify\"). First multiply impute data using amelia() using specification Amelia documentation.","code":"library(Amelia) data(\"africa\", package = \"Amelia\") # Multiple imputation a.out <- amelia(x = africa, m = 10, cs = \"country\",                 ts = \"year\", logs = \"gdp_pc\", p2s = 0)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"zelig-workflow-3","dir":"Articles","previous_headings":"Combining results after multiple imputation","what":"Zelig workflow","title":"Translating Zelig to clarify","text":"Zelig, can supply amelia object directly data argument zelig() fit model imputed dataset: Summarizing coefficient estimates simulation can done using summary(): can use Zelig::sim() setx() compute predictions specified values predictors: Zelig allow combine predicted values across imputations.","code":"fit <- zelig(gdp_pc ~ infl * trade, data = a.out,              model = \"ls\", cite = FALSE) summary(fit) fit <- setx(fit, infl = 0, trade = 40) fit <- setx1(fit, infl = 0, trade = 60)  fit <- Zelig::sim(fit) fit plot(fit)"},{"path":"https://ngreifer.github.io/clarify/articles/Zelig.html","id":"clarify-workflow-3","dir":"Articles","previous_headings":"Combining results after multiple imputation","what":"clarify workflow","title":"Translating Zelig to clarify","text":"clarify combine coefficients, unlike zelig(); instead, models fit using Amelia::(). view combined coefficient estimates, use Amelia::mi.combine(). Derived quantities can computed using clarify::misim() sim_apply() wrappers () output, list regression model fits:","code":"#Use Amelia functions to model and combine coefficients fits <- with(a.out, lm(gdp_pc ~ infl * trade))  mi.combine(fits) #> # A tibble: 4 × 8 #>   term        estimate std.error statistic  p.value       df       r miss.info #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>   <dbl>     <dbl> #> 1 (Intercept) -177.      117.        -1.51 1.87e+ 0  130515. 0.00837   0.00832 #> 2 infl          12.3       9.36       1.31 1.91e- 1 1210309. 0.00273   0.00273 #> 3 trade         21.3       1.82      11.7  1.26e-31   83428. 0.0105    0.0104  #> 4 infl:trade    -0.290     0.140     -2.07 1.96e+ 0  954984. 0.00308   0.00307 #Simulate coefficients, 100 in each of 10 imputations s <- misim(fits, n = 100)  #Compute predictions at specified values est <- sim_setx(s, x = list(infl = 0, trade = 40),                 x1 = list(infl = 0, trade = 60),                 verbose = FALSE)  summary(est) #>            Estimate 2.5 % 97.5 % #> trade = 40      675   570    783 #> trade = 60     1101  1024   1174 #> FD              426   353    498  plot(est)"},{"path":[]},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"clarify","text":"Although regression models frequently used empirical research study relationships among variables, often quantity substantive interest one coefficients model, rather quantity derived coefficients, predicted values average marginal effects. usual method estimating uncertainty derived quantities approximation known “delta method”. delta method involves two approximations: 1) variance derived quantity can represented first-order Taylor series, 2) resulting estimate normally distributed1.many cases, especially nonlinear models, approximation can fail badly. clarify implements alternative delta method—simulation-based inference—involves simulating sampling distributions derived quantities. methodology clarify relies described King, Tomz, Wittenberg (2000). Similar functionality exists clarify package Stata (Tomz, Wittenberg, King 2003) used available Zelig R package (Imai, King, Lau 2008) . clarify provides additional flexibility allowing user request derived quantity, addition providing shortcuts common quantities, including predictions representative values, average marginal effects, average dose-response functions (described ). clarify relies can seen companion marginaleffects package, offers similar functionality uses delta method calculations.","code":""},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"using-clarify","dir":"Articles","previous_headings":"","what":"Using clarify","title":"clarify","text":"four steps using clarify: Fit model data using modeling functions supported packages Use sim() take draws sampling distribution estimated model coefficients Use sim_apply() wrappers sim_setx(), sim_ame(), sim_adrf() compute derived quantities using simulated set coefficients Use summary() plot() summarize visualize distribution derived quantities perform inference sections , ’ll describe implement steps detail. First, ’ll load clarify using library(). running example, ’ll use lalonde dataset MatchIt package, contains data 614 participants enrolled job training program sampled survey. treatment variable treat outcome re78, variables confounders. Although original intent estimate effect treat re78, ’ll use generally demonstrate clarify’s capabilities. addition, ’ll use transformation outcome variable demonstrate applications nonlinear models.","code":"library(clarify) data(\"lalonde\", package = \"MatchIt\")  lalonde$re78_0 <- ifelse(lalonde$re78 == 0, 1, 0)  head(lalonde) #>      treat age educ   race married nodegree re74 re75       re78 re78_0 #> NSW1     1  37   11  black       1        1    0    0  9930.0460      0 #> NSW2     1  22    9 hispan       0        1    0    0  3595.8940      0 #> NSW3     1  30   12  black       0        0    0    0 24909.4500      0 #> NSW4     1  27   11  black       0        1    0    0  7506.1460      0 #> NSW5     1  33    8  black       0        1    0    0   289.7899      0 #> NSW6     1  22    9  black       0        1    0    0  4056.4940      0"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"1. Fitting the model","title":"clarify","text":"first step fit model. clarify can operate large set models (supported marginaleffects), including generalized linear models, multinomial models, multivariate models, instrumental variable models, many available R packages. Even clarify offer direct support given model, ways use functionality regardless (explained detail ). computing derived quantities, critical parameterize model way coefficients interpretable. , ’ll fit probit regression model outcome given treatment confounders. Coefficients probit regression straightforward interpretation, ’s okay; quantities interest can expressed derived quantities–functions model parameters, predictions, counterfactual predictions, averages contrasts .","code":"fit <- glm(re78_0 ~ treat + age + educ + race + married +              nodegree + re74 + re75, data = lalonde,            family = binomial(\"probit\"))"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"drawing-from-the-coefficient-distribution","dir":"Articles","previous_headings":"","what":"2. Drawing from the coefficient distribution","title":"clarify","text":"fitting model, use sim() draw coefficients sampling distribution. sampling distribution assumed multivariate normal multivariate t appropriate degrees freedom, mean vector equal coefficient vector covariance matrix equal asymptotic covariance matrix extracted model. arguments sim() listed : fit – fitted model object, output call fitting function (e.g., glm()) n – number simulated values draw; default, 1000. values yield replicable precise results cost speed. vcov – either covariance matrix estimated coefficients, function used extract model (e.g., sandwich::vcovHC() robust covariance matrix), string formula giving code extracting covariance matrix (see marginaleffects::get_vcov() details). left unspecified, default covariance matrix extracted model. coefs – either vector coefficients sampled function extract fitted model. left unspecified, default coefficients extracted model. Typically need specified. dist – name distribution draw sampled coefficients. Can \"normal\" normal distribution t(#) t-distribution, # represents degrees freedom. left unspecified, sim() decide distribution makes sense given characteristics model (decision made insight::get_df() type = \"wald\"). Typically need specified. model supported clarify, can omit fit argument just specify vcov coefs argument, draw coefficients distribution named dist (\"normal\" default). sim() uses random number generator draw sampled coefficients sampling distribution, seed set using set.seed() ensure results replicable across sessions. output call sim() clarify_sim object, contains sampled coefficients, original model fit object supplied, coefficients covariance matrix used sample.","code":"sim(fit = , n = , vcov = , coefs = , dist = ) # Drawing simulated coefficients using an HC2 robust # covariance matrix s <- sim(fit, vcov = \"HC2\")  s #> A `clarify_sim` object #>  - 10 coefficients, 1000 simulated values #>  - sampled distribution: multivariate normal #>  - original fitting function call: #>  #> glm(formula = re78_0 ~ treat + age + educ + race + married +  #>     nodegree + re74 + re75, family = binomial(\"probit\"), data = lalonde)"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"computing-derived-quantities","dir":"Articles","previous_headings":"","what":"3. Computing derived quantities","title":"clarify","text":"sampling coefficients, compute derived quantities set sampled coefficient store result, represents “posterior” distribution derived quantity. core functionality provided sim_apply(), accepts clarify_sim object sim() function compute return one derived quantities, applies function set simulated coefficients. arguments sim_apply() : sim – clarify_sim object; output call sim(). FUN – function takes either model fit object vector coefficients returns one derived quantities. first argument named fit take model fit object coefs take coefficients. verbose – whether display progress bar. cl – argument controls parallel processing, can number cores use cluster object resulting parallel::makeCluster(). ... - arguments FUN. FUN argument can specified one two ways: either function takes model fit object function takes vector coefficients. latter always work former works supported models. function takes model fit object, sim_apply() first insert set sampled coefficients model fit object supply modified model FUN. example, let’s say derived quantity interest predicted probability outcome participant PSID1. specified FUN function follows: fit object supplied function one coefficients set values draw sampling distribution generated sim(). supply function sim_apply() simulate sampling distribution predicted value interest: resulting clarify_est object contains simulated estimates matrix form well estimate computed original coefficients. ’ll examine sampling distribution shortly, first ’ll demonstrate computing derived quantity coefficients directly. race variable factor, black category used reference level, ’s immediately clear whether difference coefficients racehispan racewhite, represent non-reference categories hispan white. compare two directly, can use sim_apply() compute derived quantity corresponds difference . function FUN can arbitrarily complicated return many derived quantities want, though slower run FUN , longer take simulate derived quantities. Using parallel processing supplying argument cl can sometimes dramatically speed evaluation. several functions clarify serve convenience wrappers sim_apply() automate common derived quantities interest. include sim_setx() – computing predicted values first differences representative user-specified values predictors sim_ame() – computing average marginal means, contrasts average marginal means, average marginal effects sim_adrf() – computing average dose-response functions average marginal effects functions described sections . addition, functions methods simabsed_est objects, including cbind() combining two clarify_est objects together transform() computing quantities derived already-computed derived quantities. also described sections .","code":"sim_apply(sim = , FUN = , verbose = , cl = , ...) sim_fun1 <- function(fit) {   predict(fit, newdata = lalonde[\"PSID1\",], type = \"response\") } est1 <- sim_apply(s, FUN = sim_fun1, verbose = FALSE)  est1 #> A `clarify_est` object (from `sim_apply()`) #>  - 1000 simulated values #>  - 1 quantity estimated:                  #>  PSID1 0.02377322 sim_fun2 <- function(coefs) {   hispan <- unname(coefs[\"racehispan\"])   white <- unname(coefs[\"racewhite\"])      c(\"w - h\" = white - hispan) }  est2 <- sim_apply(s, FUN = sim_fun2, verbose = FALSE)  est2 #> A `clarify_est` object (from `sim_apply()`) #>  - 1000 simulated values #>  - 1 quantity estimated:                 #>  w - h 0.1089068"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"summarize-and-visualize-the-simulated-distribution","dir":"Articles","previous_headings":"","what":"4. Summarize and visualize the simulated distribution","title":"clarify","text":"examine uncertainty around perform inference estimated quantities, can use plot() summary() clarify_est object. plot() displays density plot resulting estimates across simulations, markers identifying point estimate (computed using original coefficients) , optionally, uncertainty bounds (function like confidence credible interval bounds). arguments plot() : x – clarify_est object (output call sim_apply()). parm – names indices quantities plotted one estimated sim_apply(); unspecified, plotted. ci – whether display lines uncertainty bounds. default TRUE display . level – ci TRUE, desired two-sided confidence level. default .95 bounds .025 .975 quantiles method (see ) \"quantile\". method – ci TRUE, method used compute bounds. Allowable methods include Normal approximation (\"wald\") using quantiles resulting distribution (\"quantile\"). Normal approximation involves multiplying standard deviation estimates (.e., functions like standard error sampling distribution) critical Z-statistic computed using (1-level)/2 create symmetric margin error around point estimate. default \"quantile\" instead use quantile-based bounds, appropriate distribution non-Normal. However, quantile-based bounds may require simulations stabilize. , plot first estimate computed , predicted probability participant PSID1:  plot, can see distribution simulated values non-Normal asymmetrical, values falling 0 outcome predicted probability. Given non-Normality, quantile-based bounds clearly appropriate, bounds computed Normal approximation outside bounds estimate. plot ggplot object can modified using ggplot2 syntax. can use summary() display value point estimate, uncertainty bounds, statistics describe distribution estimates. arguments summary() : object – clarify_est object (output call sim_apply()). parm – names indices quantities displayed one estimated sim_apply(); unspecified, displayed. level – desired two-sided confidence level. default .95 bounds .025 .975 quantiles method (see ) \"quantile\". method – method used compute uncertainty bounds. Allowable methods include Normal approximation (\"wald\") using quantiles resulting distribution (\"quantile\"). See plot() . null – optional argument specifying null value hypothesis test estimates. specified, p-value computed using either standard Z-test (method \"quantile\") inversion uncertainty interval. default display p-values. ’ll use summary() default arguments first simabsed_est object view point estimate quantile-based uncertainty bounds. second estimated quantity, difference two regression coefficients, closer Normally distributed, plot demonstrates (expected theoretically), ’ll use Normal approximation test hypothesis difference differs 0.  uncertainty intervals p-values summary() output computed using Normal approximation set method = \"wald\", p-value test estimate equal 0 returned set null = 0. computed bounds close quantile-based bound (displayed plot, can requested summary() setting method = \"quantile\") simulated sampling distribution close Normal.","code":"plot(x = , parm = , ci = , level = , method = ) plot(est1) summary(object = , parm = , level = , method = , null = ) summary(est1) #>       Estimate   2.5 %  97.5 % #> PSID1  0.02377 0.00362 0.11304 plot(est2) summary(est2, method = \"wald\", null = 0) #>       Estimate  2.5 % 97.5 % Std. Error Z value P-value #> w - h    0.109 -0.309  0.527      0.213    0.51    0.61"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"sim_apply-wrappers-sim_setx-sim_ame-sim_adrf","dir":"Articles","previous_headings":"","what":"sim_apply() wrappers: sim_setx(), sim_ame(), sim_adrf()","title":"clarify","text":"sim_apply() can used compute simulated sampling distribution arbitrary derived quantity interest, quantities common applied research may otherwise somewhat challenging program , clarify provides shortcut functions make computing quantities simple. functions include sim_setx(), sim_ame(), sim_adrf(). can used regression models compatible clarify supplied original call sim(). Like sim_apply(), functions named sim_*(), signifies used object produced sim() (.e., clarify_sim object). (Multiple calls functions can applied clarify_sim object combined; see cbind() section .) functions described .","code":""},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"sim_setx-predictions-at-representative-values","dir":"Articles","previous_headings":"sim_apply() wrappers: sim_setx(), sim_ame(), sim_adrf()","what":"sim_setx(): predictions at representative values","title":"clarify","text":"sim_setx() provides interface compute predictions representative user-supplied values predictors. example, might want know effect treatment “typical” individual, corresponds contrast two model-based predictions (.e., one treatment one control unit “typical” covariate values). functionality mirrors setx() setx1() functionality Zelig provides similar functionality functions modelbased, emmeans, effects, ggeffects. covariate, user can specify whether want predictions specific values “typical” values, defined clarify mode unordered categorical binary variables, median ordered categorical variables, mean continuous variables. Predictions multiple covariate combinations can requested specifying values used create grid covariate values. addition, “first difference”, defined difference predictions two covariate combinations, can computed. arguments sim_setx() follows: sim – clarify_sim object; output call sim(). x – named list containing requested values predictors, e.g., list(v1 = 1:4, v2 = \"\"). predictors named set “typical” value defined . x1 – optional named list similar x except value one predictor changed. specified, first difference computed covariate combination defined x (one combination allowed x1 specified) covariate combination defined x1. outcome – string containing name outcome interest multivariate (multiple outcome) model supplied sim() outcome category interest multinomial model supplied sim(). univariate (single outcome) binary outcomes, ignored. type – string containing type predicted value return. cases, can left unspecified request predictions scale outcome. verbose – whether display progress bar. cl – argument controls parallel processing, can number cores use cluster object resulting parallel::makeCluster(). , ’ll use sim_setx() examine predicted values outcome control treated units, re75 set 0 20000, race set “black”. use summary() resulting output, can see estimates uncertainty intervals (calculated using quantiles default). see complete grid predictor values used predictions, helps identify “typical” values predictors, can access \"setx\" attribute object: can plot distributions simulated values using plot(), also separates predictions predictor values (’s often clearer without uncertainty bounds):  can see delta method Normal approximation may yielded valid uncertainty intervals given non-Normality distributions. continuous variable many levels included grid predictors, something like dose-response function typical unit can generated. , set re75 vary 0 20000 steps 2000. plot output, can see predictions varies across levels re75:  ’ll return display average dose-response functions using sim_adrf() later. Finally, can use sim_setx() compute first differences, contrast two covariate combinations. supply one covariate profile x another x1, sim_setx() simulates two predicted values difference. , simulate first difference treated control unit re75 0 typical values covariates: use summary(), see estimates predicted values first difference (“FD”): possible compute first differences without using x1 using transform(), describe later.","code":"sim_setx(sim = , x = , x1 = , outcome = , type = , verbose = , cl = ) est3 <- sim_setx(s, x = list(treat = 0:1,                              re75 = c(0, 20000),                              race = \"black\"),                  verbose = FALSE) attr(est3, \"setx\") #>                         treat      age     educ  race married nodegree     re74 #> treat = 0, re75 = 0         0 27.36319 10.26873 black       0        1 4557.547 #> treat = 1, re75 = 0         1 27.36319 10.26873 black       0        1 4557.547 #> treat = 0, re75 = 20000     0 27.36319 10.26873 black       0        1 4557.547 #> treat = 1, re75 = 20000     1 27.36319 10.26873 black       0        1 4557.547 #>                          re75 #> treat = 0, re75 = 0         0 #> treat = 1, re75 = 0         0 #> treat = 0, re75 = 20000 20000 #> treat = 1, re75 = 20000 20000 plot(est3, ci = FALSE) est4 <- sim_setx(s, x = list(treat = 0:1,                              re75 = seq(0, 20000, by = 2000),                              race = \"black\"),                  verbose = FALSE) plot(est4) est5 <- sim_setx(s, x = list(treat = 0, re75 = 0),                  x1 = list(treat = 1, re75 = 0),                  verbose = FALSE) summary(est5) #>           Estimate   2.5 %  97.5 % #> treat = 0   0.2316  0.1630  0.3105 #> treat = 1   0.1667  0.0911  0.2715 #> FD         -0.0649 -0.1379  0.0192"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"sim_ame-average-marginal-means-and-effects","dir":"Articles","previous_headings":"sim_apply() wrappers: sim_setx(), sim_ame(), sim_adrf()","what":"sim_ame(): average marginal means and effects","title":"clarify","text":"Using predicted values effects representative values one way summarize regression models, another way compute average marginal means (AMMs) average marginal effects (AMEs). definitions terms may vary names concepts differ across sources, define AMMs average predicted values units setting one predictor chosen value, define AMEs binary predictors contrast two AMMs continuous predictors average instantaneous rate change corresponding small change predictor observed values across units2. arguments sim_ame() follows: sim – clarify_sim object; output call sim(). var – name focal variable compute AMMs AMEs, list containing values AMMs computed. subset – logical vector, evaluated original dataset used fit model, defining subset units AMMs AMEs computed. contrast – name effect measure used contrast AMMs. continuous outcomes, \"diff\" requests difference means, others available binary outcomes, including \"rr\" risk ratio, \"\" odds ratio, \"nnt\" number needed treat. specified, AMMs computed variable named var binary. Ignored variable named var continuous AME quantity computed. var names multi-category categorical variable, contrast used; see section describing transfom() computing contrasts . outcome – string containing name outcome interest multivariate (multiple outcome) model supplied sim() outcome category interest multinomial model supplied sim(). univariate (single outcome) binary outcomes, ignored. type – string containing type predicted value return. cases, can left unspecified request predictions scale outcome. eps – value observed values variable named var changed continuous compute AME. usually need specified. verbose – whether display progress bar. cl – argument controls parallel processing, can number cores use cluster object resulting parallel::makeCluster(). , ’ll use sim_ame() compute AME treat just among treated (causal inference, known average treatment effect treated, ATT). ’ll request estimate risk ratio scale. can use summary() display estimates uncertainty intervals. , ’ll also use null include test null hypothesis risk ratio equal 1 (omit tests AMMs setting values NA argument supplied null). see estimates AMMs, E[Y(0)] expected value outcome setting treat 0 E[Y(1)] expected value outcome setting treat 1, risk ratio RR. p-value test risk ratio aligns uncertainty interval containing 1. instead wanted risk difference odds ratio, re-compute AMMs. Instead, can use transform() compute new derived quantity computed AMMs. section transform() demonstrates . can compute AME continuous predictor. , ’ll consider age (just demonstration; analysis valid interpretation). can use summary() display AME estimate uncertainty interval. AME named dY/d(age), signifies derivative computed (precisely, average unit-specific derivatives). estimate can interpreted like slope linear regression model, singe summary effect predictor coarse capture nonlinear relationships. section explains compute average dose-response functions continuous predictors, provide complete picture effects outcome.","code":"sim_ame(sim = , var = , subset = , contrast = , outcome = ,         type = , eps = , verbose = , cl = ) est6 <- sim_ame(s, var = \"treat\", subset = treat == 1,                 contrast = \"rr\", verbose = FALSE) summary(est6, null = c(NA, NA, 1)) #>         Estimate 2.5 % 97.5 % P-value #> E[Y(0)]    0.319 0.254  0.396       . #> E[Y(1)]    0.244 0.190  0.313       . #> RR         0.765 0.542  1.078    0.14 est7 <- sim_ame(s, var = \"age\", verbose = FALSE) summary(est7) #>           Estimate   2.5 %  97.5 % #> dY/d(age)  0.00618 0.00261 0.00963"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"sim_adrf-average-dose-response-functions","dir":"Articles","previous_headings":"sim_apply() wrappers: sim_setx(), sim_ame(), sim_adrf()","what":"sim_adrf(): average dose-response functions","title":"clarify","text":"dose-response function individual relationship set value continuous focal predictor expected outcome. average -response function (ADRF) average dose-response functions across units. Essentially, function relates value predictor corresponding AMM outcome, average value outcome units set level predictor. ADRFs continuous analogue AMMs can used provide additional detail effect continuous predictor beyond single AME. related quantity average marginal effect function (AMEF), describes relationship continuous focal predictor AME level predictor. , rather describing outcome changes function predictor, describes effect predictor outcome changes function predictor. essentially derivative ADRF can used identify points along ADRF predictor effect. ADRF AMEF can computed using sim_adrf(). arguments : sim – clarify_sim object; output call sim(). var – name focal variable compute ADRF AMEF. subset – logical vector, evaluated original dataset used fit model, defining subset units ARDF AMEF computed. contrast – either \"adrf\" \"amef\" request ADRF AMEF, respectively. default request ADRF. – values focal predictor compute ADRF AMEF. vector values focal predictor can take . unspecified, vector n (see ) equally-spaced values minimum maximum value predictor used. typically used quantities desired subset values focal predictor. n – unspecified, number points along range focal predictor compute ADRF AMEF. yields smoother functions, take longer require memory. default 21. outcome – string containing name outcome interest multivariate (multiple outcome) model supplied sim() outcome category interest multinomial model supplied sim(). univariate (single outcome) binary outcomes, ignored. type – string containing type predicted value return. cases, can left unspecified request predictions scale outcome. eps – value observed values variable named var changed continuous compute AMEF. usually need specified. verbose – whether display progress bar. cl – argument controls parallel processing, can number cores use cluster object resulting parallel::makeCluster(). , ’ll consider age (just demonstration; analysis valid interpretation) compute ADRF AMEF age outcome. ’ll examine ages 18 50, even though range age goes slightly beyond values. First, ’ll compute ADRF age, examines outcome vary average one set unit’s value age value 18 50 (use even ages). can plot ADRF using plot().  plot, can see age increases, expected outcome also increases. can also examine AMMs requested ages using summary(), display estimated AMMs default, request just first 4 (ages 18 24): Next ’ll compute AMEF, effect age level age. can plot AMEF using plot():  plot, can see AME age increases slightly mostly constant across values age, uncertainty intervals AMEs consistently exclude 0.","code":"sim_adrf(sim = , var = , subset = , contrast = , at = ,          n = , outcome = , type = , eps = , verbose = ,          cl = ) est8 <- sim_adrf(s, var = \"age\", contrast = \"adrf\",                  at = seq(18, 50, by = 2),                  verbose = FALSE) plot(est8) summary(est8, parm = 1:4) #>          Estimate 2.5 % 97.5 % #> E[Y(18)]    0.178 0.144  0.223 #> E[Y(20)]    0.189 0.157  0.231 #> E[Y(22)]    0.200 0.169  0.239 #> E[Y(24)]    0.211 0.182  0.249 est9 <- sim_adrf(s, var = \"age\", contrast = \"amef\",                  at = seq(18, 50, by = 2),                  verbose = FALSE) plot(est9)"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"transforming-and-combining-estimates","dir":"Articles","previous_headings":"","what":"Transforming and combining estimates","title":"clarify","text":"Often, quantities interest just outputs functions , comparisons . example, test moderation treatment effect, may want compare AMEs multiple treatment groups. , might interested effect described using different effect measure one originally produced; example, may decide want risk difference AME computing risk ratio AME. functions transform() cbind() allow users transform quantities single simabsed_est object combine two clarify_est objects. essential computing quantities derived derived quantities computed sim_*() functions.","code":""},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"transform","dir":"Articles","previous_headings":"Transforming and combining estimates","what":"transform()","title":"clarify","text":"transform() generic function R typically used create new variable data frame function columns. example, compute binary outcome used model, run following: (Users familiar tidyverse note similarities transform() dplyr::mutate(); transform() can used simabsed_est objects.) Similarly, compute derived transformed quantity clarify_est object, can use transform(). , ’ll compute risk difference AME treat; previously, used sim_ame() compute AMMs risk ratio. Note used tics (```) around names AMMs; necessary contain special characters like parentheses brackets. run summary() output, new quantity, named “RD”, displayed along estimates. ’ll also set null value quantity. Something nice using simulation-based inference p-values computed inverting confidence intervals p-values risk difference risk ratio (effect measure comparing pair values) always exactly align, thereby ensuring inference depend effect measure used. value computed called sim_ame() clarify_sim object requested risk difference using contrast = \"diff\"; using transform() saves time AMMs already computed stored clarify_est object.","code":"lalonde <- transform(lalonde, re78_0 = ifelse(re78 == 0, 1, 0)) est6 <- transform(est6, RD = `E[Y(1)]` - `E[Y(0)]`) summary(est6, null = c(NA, NA, 1, 0)) #>         Estimate   2.5 %  97.5 % P-value #> E[Y(0)]   0.3195  0.2541  0.3957       . #> E[Y(1)]   0.2443  0.1900  0.3132       . #> RR        0.7646  0.5420  1.0776    0.14 #> RD       -0.0752 -0.1711  0.0203    0.14"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"cbind","dir":"Articles","previous_headings":"Transforming and combining estimates","what":"cbind()","title":"clarify","text":"cbind() another generic R function typically used combine two datasets columnwise (.e., widen dataset). clarify, cbind() can used combine two clarify_est objects estimates can examined jointly possible compare directly. example, let’s say computed AMEs two subgroups wanted compare . , call sim_ame() twice, one subset: , computed risk difference subgroups race == \"black\" race == \"hispan\". wanted compare risk differences, combine compute new quantity equal difference. ’ll . First, need rename quantities object don’t overlap; can using names(), special method clarify_est objects. Next, use cbind() bind objects together. Finally, can use transform() compute difference risk differences: Importantly, cbind() can used join together clarify_est objects computed using simulated coefficients (.e., resulting call sim()). preserves covariance among estimated quantities, critical valid inference. , sim() called per model, derived quantities computed using output.","code":"# AME of treat with race = \"black\" est10b <- sim_ame(s, var = \"treat\", subset = race == \"black\",                   contrast = \"diff\", verbose = FALSE) summary(est10b) #>         Estimate   2.5 %  97.5 % #> E[Y(0)]   0.3370  0.2621  0.4255 #> E[Y(1)]   0.2596  0.2010  0.3319 #> Diff     -0.0774 -0.1798  0.0207  # AME of treat with race = \"hispan\" est10h <- sim_ame(s, var = \"treat\", subset = race == \"hispan\",                   contrast = \"diff\", verbose = FALSE) summary(est10h) #>         Estimate   2.5 %  97.5 % #> E[Y(0)]   0.1745  0.1015  0.2838 #> E[Y(1)]   0.1225  0.0588  0.2324 #> Diff     -0.0520 -0.1225  0.0149 names(est10b) <- paste(names(est10b), \"b\", sep = \"_\") names(est10h) <- paste(names(est10h), \"h\", sep = \"_\") est10 <- cbind(est10b, est10h) summary(est10) #>           Estimate   2.5 %  97.5 % #> E[Y(0)]_b   0.3370  0.2621  0.4255 #> E[Y(1)]_b   0.2596  0.2010  0.3319 #> Diff_b     -0.0774 -0.1798  0.0207 #> E[Y(0)]_h   0.1745  0.1015  0.2838 #> E[Y(1)]_h   0.1225  0.0588  0.2324 #> Diff_h     -0.0520 -0.1225  0.0149 est10 <- transform(est10, `Dh - Db` = Diff_h - Diff_b) summary(est10, parm = \"Dh - Db\") #>         Estimate    2.5 %   97.5 % #> Dh - Db  0.02540 -0.00458  0.07876"},{"path":"https://ngreifer.github.io/clarify/articles/clarify.html","id":"using-clarify-with-multiply-imputed-data","dir":"Articles","previous_headings":"","what":"Using clarify with multiply imputed data","title":"clarify","text":"Simulation-based inference multiply imputed data relatively straightforward. Simulated coefficients drawn model estimated imputed dataset separately, simulated coefficients pooled single set simulated coefficients. Bayesian terms, considered “mixing draws” recommended approach Bayesian analysis multiply imputed data (Zhou Reiter 2010). Using clarify multiply imputed data simple. Rather using sim(), use function misim(). misim() functions just like sim() except takes list model fits (.e, containing model fit imputed dataset) object containing list (e.g., mira object mice::() mimira object MatchThem::()). misim() simulates coefficient distributions within imputed dataset appends together form single combined set coefficient draws. sim_apply() wrappers accept output misim() compute desired quantity using set coefficients. function rely using dataset (e.g., sim_ame(), averages predicted outcomes across units dataset used fit model), automatically know associate given coefficient draw imputed dataset used fit model produced draw. user-written functions supplied FUN argument sim_apply(), important extract dataset model fit. demonstrated . final estimates quantity interest computed mean estimates computed imputed dataset (.e., using original coefficients, simulated ones), quantity computed using standard pooling rules. always valid noncollapsible estimates, like ratios, care taken ensure mean resulting estimates valid interpretation. arguments misim() follows: fitslist – list model fits accepted object containing (e.g., mira object mice::()) n – number simulations run imputed dataset. default 1000, fewer can used total number simulated quantities m*n, m number imputed datasets. vcov, coefs, dist – sim(), except list arguments can supplied applied imputed dataset. illustrate using misim() sim_apply() multiply imputed data. ’ll use africa dataset Amelia package. function ’ll applying imputed dataset one computes average marginal effect infl. (’ll run analysis afterward using sim_ame().) Note sim_apply() “knows” imputation produced set simulated coefficients, using insight::get_predictors() fit supplied sim_fun() use right dataset. Care taken analyses restrict imputed dataset different way (e.g. matching caliper one), resulting imputations may refer specific target population mixing draws may invalid. , can use sim_ame(): get results, expected.","code":"misim(fitlist = , n = , vcov = , coefs = , dist = ) library(Amelia) #> Loading required package: Rcpp #> ##  #> ## Amelia II: Multiple Imputation #> ## (Version 1.8.1, built: 2022-11-18) #> ## Copyright (C) 2005-2023 James Honaker, Gary King and Matthew Blackwell #> ## Refer to http://gking.harvard.edu/amelia/ for more information #> ## data(\"africa\", package = \"Amelia\")  # Multiple imputation a.out <- amelia(x = africa, m = 10, cs = \"country\",                 ts = \"year\", logs = \"gdp_pc\", p2s = 0)  # Fit model to each dataset model.list <- with(a.out, lm(gdp_pc ~ infl * trade))  # Simulate coefficients si <- misim(model.list, n = 200)  si #> A `clarify_misim` object #>  - 4 coefficients, 10 imputations with 200 simulated values each #>  - sampled distributions: multivariate t(116) sim_fun <- function(fit) {   #Extract the original dataset using get_predictors()   X <- insight::get_predictors(fit)      p0 <- predict(fit, newdata = X)      #Perturb infl slightly   p1 <- predict(fit, newdata = transform(X, infl = infl + 1e-5))    return(c(AME = mean((p1 - p0) / 1e-5))) }  est_mi <- sim_apply(si, FUN = sim_fun, verbose = FALSE)  summary(est_mi) #>     Estimate 2.5 % 97.5 % #> AME    -5.66 -9.03  -2.17 est_mi2 <- sim_ame(si, var = \"infl\", verbose = FALSE)"},{"path":[]},{"path":"https://ngreifer.github.io/clarify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Noah Greifer. Author, maintainer. Steven Worthington. Author. Stefano Iacus. Author. Gary King. Author.","code":""},{"path":"https://ngreifer.github.io/clarify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greifer N, Worthington S, Iacus S, King G (2023). clarify: Simulation-Based Inference Regression Models. https://github.com/iqss/clarify, https://iqss.github.io/clarify/.","code":"@Manual{,   title = {clarify: Simulation-Based Inference for Regression Models},   author = {Noah Greifer and Steven Worthington and Stefano Iacus and Gary King},   year = {2023},   note = {https://github.com/iqss/clarify, https://iqss.github.io/clarify/}, }"},{"path":"https://ngreifer.github.io/clarify/index.html","id":"clarify-simulation-based-inference-for-regression-models","dir":"","previous_headings":"","what":"Simulation-Based Inference for Regression Models","title":"Simulation-Based Inference for Regression Models","text":"clarify implements simulation-based inference computing functions model parameters, average marginal effects. See clarify website documentation examples.","code":""},{"path":"https://ngreifer.github.io/clarify/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Simulation-Based Inference for Regression Models","text":"Simulation-based inference alternative delta method bootstrapping performing inference quantities functions model parameters. delta method involves multiple assumptions: 1) regression coefficients normally distributed, 2) resulting quantity interest normally distributed, 3) first-order approximation variance desired estimator equal true variance. assumptions incorrect, especially likely quantity interest complicated nonlinear function model coefficients, resulting inferences can inaccurate. Bootstrapping one solution problem require assumptions valid nonparametric inference; however, computationally intensive original model needs fit many times, problems model apparent bootstrap samples (e.g., failure converge, perfect prediction) can make using bootstrapping challenging. Simulation-based inference provides compromise two methods: accurate delta method require assumptions 2) 3), faster stable bootstrapping model needs fit . Simulation-based inference involves simulating model coefficients multivariate distribution using estimated values covariance single model fit original data, computing quantities interest set model coefficients, performing inference using resulting distribution estimates sampling distribution. Confidence intervals can computed using percentiles resulting sampling distribution, p-values can computed inverting confidence intervals. Alternatively, resulting sampling distribution normally distributed, standard error can estimated standard deviation estimates normal-theory confidence intervals p-values can computed. clarify package designed provide simple, general interface simulation-based inference, along convenience functions perform common tasks like computing average marginal effects. primary functions clarify sim(), sim_apply(), summary(), plot(). work together create simple workflow simulation-based inference. sim() simulates model parameters fitted model sim_apply() applies estimator simulated coefficients, original object new coefficients inserted summary() produces confidence intervals p-values resulting estimates plot() produces plots simulated sampling distribution resulting estimates also wrappers sim_apply() performing common operations: sim_ame() computes average marginal effect variable, mirroring marginaleffects::comparisons() marginaleffects::marginaleffects(); sim_setx() computes predictions typical values covariates differences , mirroring Zelig::setx() Zelig::setx1(); sim_adrf() computes average dose-response functions. clarify also offers support models fit multiply imputed data misim() function.","code":""},{"path":"https://ngreifer.github.io/clarify/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulation-Based Inference for Regression Models","text":"clarify can installed CRAN using can install development version clarify GitHub ","code":"install.packages(\"clarify\") install.packages(\"remotes\") remotes::install_github(\"iqss/clarify\")"},{"path":"https://ngreifer.github.io/clarify/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simulation-Based Inference for Regression Models","text":"example performing g-computation ATT logistic regression compute marginal log risk ratio confidence interval:  clarify provides shortcut computing average marginal effects comparisons average adjusted predictions, sim_ame(), essentially wrapper sim_apply() extra processing. can compute log marginal risk ratio : used marginaleffects, uses delta method instead: plot simulated sampling distribution indicates sampling distribution log risk ratio normally distributed around estimate, indicating delta method may poor approximation asymmetric confidence intervals produced using simulation may valid. want compute marginal risk ratio, can using transform() already-produced output: can also use clarify compute predictions first differences set typical values predictors, mimicking functionality Zelig’s setx() setx1() functions, using sim_setx():  clarify offers parallel processing estimation functions speed computation. methodology simulation-based inference described King, Tomz, Wittenberg (2000). King, G., Tomz, M., & Wittenberg, J. (2000). Making Statistical Analyses: Improving Interpretation Presentation. American Journal Political Science, 44(2), 347–361. https://doi.org/10.2307/2669316","code":"library(clarify)  data(\"lalonde\", package = \"MatchIt\")  # Fit the model fit <- glm(I(re78 == 0) ~ treat * (age + educ + race + married                                    + nodegree + re74 + re75),            data = lalonde, family = binomial)  # Simulate coefficients from a multivariate normal distribution set.seed(123) sim_coefs <- sim(fit)  # Apply a function that computes the g-computation estimate for the ATT # to models with the estimated coefficients replaced by the simulated ones sim_est <- sim_apply(sim_coefs, function(fit) {   d <- subset(lalonde, treat == 1)   d$treat <- 1   p1 <- mean(predict(fit, newdata = d, type = \"response\"))   d$treat <- 0   p0 <- mean(predict(fit, newdata = d, type = \"response\"))   c(`E[Y(0)]` = p0, `E[Y(1)]` = p1, `log(RR)` = log(p1 / p0)) }, verbose = FALSE)  sim_est #> A `clarify_est` object (from `sim_apply()`) #>  - 1000 simulated values #>  - 3 quantities estimated:                    #>  E[Y(0)]  0.2944381 #>  E[Y(1)]  0.2432432 #>  log(RR) -0.1910068  # View the estimates, confidence intervals, and p-values summary(sim_est, null = c(NA, NA, 0)) #>         Estimate  2.5 % 97.5 % P-value #> E[Y(0)]    0.294  0.220  0.384       . #> E[Y(1)]    0.243  0.199  0.360       . #> log(RR)   -0.191 -0.479  0.330    0.79  # Plot the resulting sampling distributions plot(sim_est) # Marginal risk ratio ATT, simulation-based sim_est <- sim_ame(sim_coefs, var = \"treat\", subset = treat == 1,                    contrast = \"log(RR)\", verbose = FALSE)  sim_est #> A `clarify_est` object (from `sim_ame()`) #>  - Average marginal effect of `treat` #>  - 1000 simulated values #>  - 3 quantities estimated:                    #>  E[Y(0)]  0.2944381 #>  E[Y(1)]  0.2432432 #>  log(RR) -0.1910068  summary(sim_est, null = c(NA, NA, 0)) #>         Estimate  2.5 % 97.5 % P-value #> E[Y(0)]    0.294  0.220  0.384       . #> E[Y(1)]    0.243  0.199  0.360       . #> log(RR)   -0.191 -0.479  0.330    0.79 # Marginal risk ratio ATT, delta method-based marginaleffects::comparisons(fit, variables = \"treat\",                              newdata = subset(lalonde, treat == 1),                              transform_pre = \"lnratioavg\") |>   summary() #>    Term              Contrast Effect Std. Error z value Pr(>|z|)   2.5 % 97.5 % #> 1 treat ln(mean(1) / mean(0)) -0.191     0.1925  -0.992  0.32119 -0.5684 0.1864 #>  #> Model type:  glm  #> Prediction type:  response #Transform estimates into new quantities of interest sim_est <- transform(sim_est, `RR` = exp(`log(RR)`)) summary(sim_est, null = c(NA, NA, 0, 1)) #>         Estimate  2.5 % 97.5 % P-value #> E[Y(0)]    0.294  0.220  0.384       . #> E[Y(1)]    0.243  0.199  0.360       . #> log(RR)   -0.191 -0.479  0.330    0.79 #> RR         0.826  0.619  1.391    0.79 # Predictions across age and treat at typical values # of the other predictors sim_est <- sim_setx(sim_coefs, x = list(age = 20:50, treat = 0:1),                     verbose = FALSE)  #Plot of predicted values across age for each value of treat plot(sim_est)"},{"path":"https://ngreifer.github.io/clarify/reference/clarify-package.html","id":null,"dir":"Reference","previous_headings":"","what":"clarify: Simulation-Based Inference for Regression Models — clarify-package","title":"clarify: Simulation-Based Inference for Regression Models — clarify-package","text":"Performs simulation-based inference alternative delta method obtaining valid confidence intervals p-values, especially useful resulting quantity normally distributed delta method approximation fails. framework simulation-based inference described King, Tomz, Wittenberg (2000) doi:10.2307/2669316 . 'clarify' meant replace functionality 'Zelig'; see vignette \"Translating Zelig clarify\" replicating functionality.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/clarify-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"clarify: Simulation-Based Inference for Regression Models — clarify-package","text":"Maintainer: Noah Greifer ngreifer@iq.harvard.edu (ORCID) Authors: Steven Worthington sworthington@iq.harvard.edu (ORCID) Stefano Iacus siacus@iq.harvard.edu (ORCID) Gary King king@harvard.edu (ORCID)","code":""},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate model coefficients after multiple imputation — misim","title":"Simulate model coefficients after multiple imputation — misim","text":"misim() simulates model parameters multivariate normal t distributions multiple imputation used sim_apply() calculate quantities interest.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate model coefficients after multiple imputation — misim","text":"","code":"misim(fitlist, n = 1000, vcov = NULL, coefs = NULL, dist = NULL)"},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate model coefficients after multiple imputation — misim","text":"fitlist list model fits, one imputed dataset, mira object (output call () applied mids object mice). n number simulations run imputed dataset; default 1000. always better resulting calculations take longer. vcov square covariance matrix coefficient covariance estimates, function use extract fit, list thereof element imputed dataset. default, uses stats::vcov() insight::get_varcov() work. coefs vector coefficient estimates, function use extract fit, list thereof element imputed dataset. default, uses stats::coef() insight::get_parameters() work. dist character vector containing name multivariate distribution(s) use draw simulated coefficients. one \"normal\" (multivariate normal distribution) \"t_{#}\" (multivariate t distribution), {#} corresponds desired degrees freedom (e.g., \"t_100\"). NULL, right distributions use determined based heuristics; see sim() details.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate model coefficients after multiple imputation — misim","text":"clarify_misim object, inherits clarify_sim following components: sim.coefs matrix containing simulated coefficients column coefficient row simulation imputation coefs matrix containing original coefficients extracted fitlist supplied coefs, row per imputation. fit list model fits supplied fitlist imp identifier imputed dataset set simulated coefficients corresponds . \"dist\" attribute contains \"normal\" coefficients sampled multivariate normal distribution \"t({df})\" sampled multivariate t distribution. \"clarify_hash\" attribute contains unique hash generated rlang::hash().","code":""},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate model coefficients after multiple imputation — misim","text":"misim() essentially combines multiple sim() calls applied list model fits, fit imputed dataset, single combined pool simulated coefficients. simulation-based inference used multiply imputed data, many imputations required; see Zhou Reiter (2010).","code":""},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate model coefficients after multiple imputation — misim","text":"Zhou, X., & Reiter, J. P. (2010). Note Bayesian Inference Multiple Imputation. American Statistician, 64(2), 159–163. doi:10.1198/tast.2010.09109","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/misim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate model coefficients after multiple imputation — misim","text":"","code":"data(\"africa\", package = \"Amelia\")  # Multiple imputation using Amelia a.out <- Amelia::amelia(x = africa, m = 10,                         cs = \"country\",                         ts = \"year\", logs = \"gdp_pc\",                         p2s = 0)  fits <- with(a.out, lm(gdp_pc ~ infl * trade))  # Simulate coefficients s <- misim(fits) s #> A `clarify_misim` object #>  - 4 coefficients, 10 imputations with 1000 simulated values each #>  - sampled distributions: multivariate t(116)"},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"plot.clarify_adrf() plots output sim_adrf(). average dose-response function (ADRF, requested contrast = \"adrf\" sim_adrf()), plot average marginal mean outcome requested values focal predictor; average marginal effects function (AMEF, requested contrast = \"amef\" sim_adrf()), plot instantaneous average marginal effect focal predictor outcome requested values focal predictor.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"","code":"# S3 method for clarify_adrf plot(   x,   ci = TRUE,   level = 0.95,   method = \"quantile\",   baseline,   color = \"black\",   ... )"},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"x clarify_adrf object resulting call sim_adrf(). ci logical; whether display confidence bands estimates. Default TRUE. level confidence level desired. Default .95 95% confidence intervals. method method used compute confidence bands. Can \"wald\" use Normal approximation \"quantile\" use simulated sampling distribution (default). See summary.clarify_est() details. Abbreviations allowed. baseline logical; whether include horizontal line y = 0 plot. Default FALSE ADRF (since 0 might range outcome) TRUE AMEF. color color line confidence band plot. ... plot(), arguments passed ggplot2::geom_density().","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"ggplot object.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"plots produced using ggplot2::geom_line() ggplot2::geom_ribbon(). confidence bands interpreted pointwise (.e., account simultaneous inference).","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_adrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal predictions from sim_adrf() — plot.clarify_adrf","text":"","code":"## See help(\"sim_adrf\") for examples"},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marginal predictions from sim_setx() — plot.clarify_setx","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"plot.clarify_sext() plots output sim_setx(), providing graphics similar plot.clarify_est() features specifically plot marginal predictions. continues predictors, plot marginal predictions confidence bands across levels predictor. Otherwise, plot simulated sampling distribution marginal predictions.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"","code":"# S3 method for clarify_setx plot(x, var = NULL, ci = TRUE, level = 0.95, method = \"quantile\", ...)"},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"x clarify_est object resulting call sim_setx(). var name focal varying predictor, .e., variable x-axis plot. variables varying set values used color resulting plot. See Details. Ignored predictors vary one predictor varies reference grid x1 specified sim_setx(). set, use predictor greatest number unique values specified reference grid. ci logical; whether display confidence intervals bands estimates. Default TRUE. level confidence level desired. Default .95 95% confidence intervals. method method used compute confidence intervals bands. Can \"wald\" use Normal approximation \"quantile\" use simulated sampling distribution (default). See summary.clarify_est() details. Abbreviations allowed. ... plot(), arguments passed ggplot2::geom_density().","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"ggplot object.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"plot() creates one two kinds plots depending reference grid specified call sim_setx() var set . focal varying predictor (.e., one set var) numeric takes three unique values reference grid, produced plot line graph displaying value marginal prediction (denoted E[Y|X]) across values focal varying predictor, confidence bands displayed ci = TRUE. predictors also vary, lines different values displayed different colors. plots produced using ggplot2::geom_line() ggplot2::geom_ribbon() focal varying predictor factor character takes two fewer values reference grid, produced plot density plot simulated predictions, similar plot resulting plot.clarify_est(). variables vary, densities different values displayed different colors. plots produced using ggplot2::geom_density(). Marginal predictions identified corresponding levels predictors vary. user keep track whether non-varying predictors set specified automatically set \"typical\" levels.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/plot.clarify_setx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marginal predictions from sim_setx() — plot.clarify_setx","text":"","code":"## See help(\"sim_setx\") for examples"},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate model coefficients — sim","title":"Simulate model coefficients — sim","text":"sim() simulates model parameters multivariate normal t distribution used sim_apply() calculate quantities interest.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate model coefficients — sim","text":"","code":"sim(fit, n = 1000, vcov = NULL, coefs = NULL, dist = NULL)"},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate model coefficients — sim","text":"fit model fit, output call lm() glm(). Can left unspecified coefs vcov functions. n number simulations run; default 1000. always better resulting calculations take longer. vcov either square covariance matrix coefficient covariance estimates function use extract fit. default, uses stats::vcov() insight::get_varcov() work. coefs either vector coefficient estimates function use extract fit. default, uses stats::coef() insight::get_parameters() work. dist string containing name multivariate distribution use draw simulated coefficients. one \"normal\" (multivariate normal distribution) \"t({#})\" (multivariate t distribution), {#} corresponds desired degrees freedom (e.g., \"t(100)\"). NULL, right distribution use determined based heuristics; see Details.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate model coefficients — sim","text":"clarify_sim object, following components: sim.coefs matrix containing simulated coefficients column coefficient row simulation coefs original coefficients extracted fit supplied coefs. vcov covariance matrix coefficients extracted fit supplied vcov fit original model fit supplied fit \"dist\" attribute contains \"normal\" coefficients sampled multivariate normal distribution \"t(df)\" sampled multivariate t distribution. \"clarify_hash\" attribute contains unique hash generated rlang::hash().","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate model coefficients — sim","text":"dist NULL, sim() samples multivariate normal t distribution depending whether df.residual(fit) NULL . NULL fit unspecified, multivariate normal distribution used. Otherwise (primarily linear models fit lm()), multivariate t distribution used, df.residual(fit) used degrees freedom. multivariate normal used, sampled means equal estimated coefficients parameter covariance matrix covariance matrix using mvnfast::rmvn(). multivariate t distribution used, sampled means equal estimated coefficients scaling matrix equal cov*(df - 2)/df, cov parameter covariance matrix df residual degrees freedom model, using mvnfast::rmvt().","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate model coefficients — sim","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- lm(re78 ~ treat * (age + race + nodegree + re74), data = lalonde)  # Simulate coefficients s <- sim(fit) s #> A `clarify_sim` object #>  - 12 coefficients, 1000 simulated values #>  - sampled distribution: multivariate t(602) #>  - original fitting function call: #>  #> lm(formula = re78 ~ treat * (age + race + nodegree + re74), data = lalonde)  ## Could also use a robust covariance matrix, e.g., # s <- sim(fit, vcov = sandwich::vcovHC)  # Simulated coefficients assuming a normal distribution # for coefficients; default for `lm` objects is a t- # distribution s <- sim(fit, dist = \"normal\") s #> A `clarify_sim` object #>  - 12 coefficients, 1000 simulated values #>  - sampled distribution: multivariate normal #>  - original fitting function call: #>  #> lm(formula = re78 ~ treat * (age + race + nodegree + re74), data = lalonde)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an average dose-response function — sim_adrf","title":"Compute an average dose-response function — sim_adrf","text":"sim_adrf() wrapper sim_apply() computes average dose-response functions (ADRFs) average marginal effect functions (AMEFs). ADRF describes relationship values focal variable can take expected value outcome units given value variable. AMEF describes relationship values focal variable can take derivative ADRF value.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an average dose-response function — sim_adrf","text":"","code":"sim_adrf(   sim,   var,   subset = NULL,   contrast = \"adrf\",   at = NULL,   n = 21,   outcome = NULL,   type = NULL,   eps = 1e-05,   verbose = TRUE,   cl = NULL )  # S3 method for clarify_adrf print(x, digits = NULL, max.ests = 6, ...)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an average dose-response function — sim_adrf","text":"sim clarify_sim object; output call sim() misim(). var name variable ADRF AMEF computed. variable must present model supplied sim() must numeric variable taking two unique values. subset optional; vector used subset data used compute ADRF AMEF. evaluated within original dataset used fit model using subset(), nonstandard evaluation allowed. contrast string naming type quantity produced: \"adrf\" ADRF (default) \"amef\" AMEF. levels variable named var evaluate ADRF AMEF. vector numeric values corresponding possible levels var. NULL, set range slightly lowest observed value var slightly largest value. n = NULL, number points evaluate ADRF AMEF. Default 21. Ignored NULL. outcome string containing name outcome outcome level multivariate (multiple outcomes) multi-category outcomes. Ignored univariate (single outcome) binary outcomes. type string containing type predicted values (e.g., link response). Passed marginaleffects::get_predict() eventually predict() cases. default allowable option depend type model supplied, almost always corresponds response scale (e.g., predicted probabilities binomial models). eps contrast = \"amef\", value shift value var approximate derivative. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place. x clarify_adrf object. digits minimum number significant digits used; passed print.data.frame(). max.ests maximum number estimates display. ... optional arguments passed FUN.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an average dose-response function — sim_adrf","text":"clarify_adrf object, inherits clarify_est similar output sim_apply(), additional attributes \"var\" containing variable named var, \"\" containing values ADRF AMEF evaluated, \"contrast\" containing argument supplied contrast. ADRF, average marginal means named E[Y({v})], {v} replaced values . AMEF, average marginal effects named dY/d({x})|{} {x} replaced var {} replaced values .","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute an average dose-response function — sim_adrf","text":"ADRF composed average marginal means across levels focal predictor. level focal predictor, predicted values outcome computed setting value predictor level, values outcome averaged across units sample arrive average marginal mean. Thus, ADRF represent relationship \"dose\" (.e., level focal predictor) average \"response\" (.e., outcome variable). continuous analog average marginal effect computed binary predictor, e.g., using sim_ame(). Although inference can level predictor two levels predictor, typically plot ADRF useful relevant quantity. can requested using plot.clarify_adrf(). AMEF derivative ADRF; call derivative ADRF point \"treatment effect\" (.e., rate outcome changes corresponding small change predictor, \"treatment\"), AMEF function relates size treatment effect level treatment. shape AMEF usually less importance value AMEF level predictor, corresponds size treatment effect corresponding level. AMEF computed computing ADRF level focal predictor specified , shifting predictor value tiny amount (control eps), computing ratio change outcome shift, averaging value across units. quantity related average marginal effect continuous predictor computed sim_ame(), rather average treatment effects across observed levels treatment, AMEF function evaluated possible level treatment. \"tiny amount\" used eps times standard deviation var. unit-level weights included model fit (discoverable using insight::get_weights()), means computed weighted means.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/sim_adrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an average dose-response function — sim_adrf","text":"","code":"data(\"lalonde\", package = \"MatchIt\")  # Fit the model fit <- glm(I(re78 > 0) ~ treat + age + race + re74,            data = lalonde, family = binomial)  # Simulate coefficients set.seed(123) s <- sim(fit, n = 100)  # ADRF for `age` est <- sim_adrf(s, var = \"age\", at = seq(15, 55, by = 5),                 verbose = FALSE) est #> A `clarify_est` object (from `sim_adrf()`) #>  - Average does-response function of `age` #>  - 100 simulated values #>  - 9 quantities estimated:                    #>  E[Y(15)] 0.8428184 #>  E[Y(20)] 0.8152710 #>  E[Y(25)] 0.7842572 #> # ... and 3 more                    #>  E[Y(40)] 0.6711382 #>  E[Y(45)] 0.6277080 #>  E[Y(50)] 0.5822739 #>  E[Y(55)] 0.5355393 plot(est)   # AMEF for `age` est <- sim_adrf(s, var = \"age\", contrast = \"amef\",                at = seq(15, 55, by = 5),                verbose = FALSE) est #> A `clarify_est` object (from `sim_adrf()`) #>  - Average marginal effect function of `age` #>  - 100 simulated values #>  - 9 quantities estimated:                           #>  dY/d(age)|15 -0.005168501 #>  dY/d(age)|20 -0.005854165 #>  dY/d(age)|25 -0.006551336 #> # ... and 3 more                           #>  dY/d(age)|40 -0.008444219 #>  dY/d(age)|45 -0.008908180 #>  dY/d(age)|50 -0.009241880 #>  dY/d(age)|55 -0.009425810 summary(est) #>              Estimate    2.5 %   97.5 % #> dY/d(age)|15 -0.00517 -0.00666 -0.00342 #> dY/d(age)|20 -0.00585 -0.00802 -0.00368 #> dY/d(age)|25 -0.00655 -0.00938 -0.00393 #> dY/d(age)|30 -0.00724 -0.01103 -0.00419 #> dY/d(age)|35 -0.00788 -0.01255 -0.00443 #> dY/d(age)|40 -0.00844 -0.01369 -0.00467 #> dY/d(age)|45 -0.00891 -0.01430 -0.00489 #> dY/d(age)|50 -0.00924 -0.01436 -0.00509 #> dY/d(age)|55 -0.00943 -0.01387 -0.00527 plot(est)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute average marginal effects — sim_ame","title":"Compute average marginal effects — sim_ame","text":"sim_ame() wrapper sim_apply() computes average marginal effects, average effect changing single variable one value another (.e., one category another categorical variables tiny change continuous variables).","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute average marginal effects — sim_ame","text":"","code":"sim_ame(   sim,   var,   subset = NULL,   contrast = NULL,   outcome = NULL,   type = NULL,   eps = 1e-05,   verbose = TRUE,   cl = NULL )  # S3 method for clarify_ame print(x, digits = NULL, max.ests = 6, ...)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute average marginal effects — sim_ame","text":"sim clarify_sim object; output call sim() misim(). var either name variable marginal effects computed named list length one containing values variable take. list supplied named variables categorical (factor, character, two values), categorical calculations triggered. Otherwise, continuous calculations triggered. See Details. subset optional; vector used subset data used compute marginal effects. evaluated within original dataset used fit model using subset(), nonstandard evaluation allowed. contrast string containing name contrast average marginal means variable named var categorical takes two values. Allowed options include \"diff\" difference means (also \"rd\"), \"rr\" risk ratio (also \"irr\"), \"log(rr): log risk ratio (also \"log(irr)\"), \"\" odds ratio, \"log()\" log odds ratio, \"nnt\" number needed treat. options case sensitive, parentheses must included present. outcome string containing name outcome outcome level multivariate (multiple outcomes) multi-category outcomes. Ignored univariate (single outcome) binary outcomes. type string containing type predicted values (e.g., link response). Passed marginaleffects::get_predict() eventually predict() cases. default allowable option depend type model supplied, almost always corresponds response scale (e.g., predicted probabilities binomial models). eps variable named var continuous, value change variable values approximate derivative. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place. x clarify_ame object. digits minimum number significant digits used; passed print.data.frame(). max.ests maximum number estimates display. ... optional arguments passed FUN.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute average marginal effects — sim_ame","text":"clarify_ame object, inherits clarify_est similar output sim_apply(), additional attribute \"var\" containing variable named var. average marginal means named E[Y({v})], {v} replaced values focal variable (var) takes . average marginal effect continuous var named dY/d({x}) {x} replaced var.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute average marginal effects — sim_ame","text":"sim_ame() operates differently depending whether continuous categorical calculations triggered. trigger categorical calculations, var string naming factor, character, binary variable named list specific values given (e.g., var = list(x1 = c(1, 2 ,3))). Otherwise, continuous calculations triggered. Categorical calculations involve computing average marginal means level var. average marginal mean average predicted outcome value setting units' value var one level. (quantity several names, including average potential outcome, average adjusted prediction, standardized mean). var takes two levels (supplied list two values specified), contrast average marginal means can computed supplying argument contrast. Contrasts can manually computed using transform() afterward well. Continuous calculations involve computing average marginal effects var across units. marginal effect instantaneous rate change corresponding changing unit's observed value var tiny amount considering degree predicted outcome changes. ratio change predicted outcome change value var marginal effect; averaged across sample arrive average marginal effect. \"tiny amount\" used eps times standard deviation focal variable. unit-level weights included model fit (discoverable using insight::get_weights()), means computed weighted means.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"effect-measures","dir":"Reference","previous_headings":"","what":"Effect measures","title":"Compute average marginal effects — sim_ame","text":"effect measures specified contrast defined . Typically \"diff\" appropriate continuous outcomes \"diff\" \"irr\" appropriate count outcomes; rest appropriate binary outcomes. focal variable two levels, 0 1, outcome Y, average marginal means denoted formulas E[Y(0)] E[Y(1)], respectively. log(.) versions defined taking log() (natural log) corresponding effect measure.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/sim_ame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute average marginal effects — sim_ame","text":"","code":"data(\"lalonde\", package = \"MatchIt\")  # Fit the model fit <- glm(I(re78 > 0) ~ treat + age + race + re74,            data = lalonde, family = binomial)  # Simulate coefficients set.seed(123) s <- sim(fit, n = 100)  # Average marginal effect of `age` est <- sim_ame(s, var = \"age\", verbose = FALSE) summary(est) #>           Estimate    2.5 %   97.5 % #> dY/d(age) -0.00678 -0.00981 -0.00403  # Contrast between average marginal means for `treat` est <- sim_ame(s, var = \"treat\", contrast = \"rr\",                verbose = FALSE) summary(est) #>         Estimate 2.5 % 97.5 % #> E[Y(0)]    0.744 0.698  0.784 #> E[Y(1)]    0.809 0.758  0.851 #> RR         1.088 0.987  1.198  # Average marginal means for `race`; need to follow up # with contrasts for specific levels est <- sim_ame(s, var = \"race\", verbose = FALSE)  est <- transform(est,                  `RR(h,b)` = `E[Y(hispan)]` / `E[Y(black)]`)  summary(est) #>              Estimate 2.5 % 97.5 % #> E[Y(black)]     0.704 0.637  0.764 #> E[Y(hispan)]    0.832 0.734  0.899 #> E[Y(white)]     0.800 0.753  0.843 #> RR(h,b)         1.181 1.026  1.360"},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to simulated parameter values — sim_apply","title":"Apply a function to simulated parameter values — sim_apply","text":"sim_apply() applies function produces quantities interest set simulated coefficients produced sim(); calculated quantities form posterior sampling distribution quantities interest. Capabilities available parallelization.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to simulated parameter values — sim_apply","text":"","code":"sim_apply(sim, FUN, verbose = TRUE, cl = NULL, ...)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to simulated parameter values — sim_apply","text":"sim clarify_sim object; output call sim() misim(). FUN function applied set simulated coefficients. See Details. verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place. ... optional arguments passed FUN.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to simulated parameter values — sim_apply","text":"clarify_est object, matrix column estimated quantity row simulation. original estimates (FUN applied original coefficients model fit object) stored attribute \"original\". \"sim_hash\" attributes contained simulation hash produced sim().","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to simulated parameter values — sim_apply","text":"sim_apply() applies function, FUN, set simulated coefficients, similar apply(). function return numeric vector containing one estimated quantities. named vector easily keep track meaning estimated quantity. Care taken ensure returned vector length time FUN called. NAs allowed output avoided possible. arguments FUN can specified ways. FUN argument called coefs, simulated set coefficients passed argument, FUN compute return quantity based coefficients (e.g., difference two coefficients one wants test whether two coefficients equal). FUN argument called fit, model fit object type one originally supplied sim() (e.g., lm glm object) passed argument, coefficients fit object replaced simulated coefficients generated sim(), FUN compute return quantity based model fit (e.g., computation based output predict()). neither coefs fit names arguments FUN, model fit object replaced coefficients supplied first argument FUN. custom coefficients supplied sim(), .e., coefs argument sim() left default value, FUN must accept coefs argument warning thrown accepts fit argument. sim_apply() know reconstruct original fit object new coefficients inserted. quantities computed sim_apply() must therefore computed directly coefficients.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"sim-apply-with-multiply-imputed-data","dir":"Reference","previous_headings":"","what":"sim_apply() with multiply imputed data","title":"Apply a function to simulated parameter values — sim_apply","text":"using misim() sim_apply() multiply imputed data, coefficients supplied model fit corresponding imputation identifier associated set coefficients, means FUN uses dataset extracted model, model fit corresponding imputation. original estimates (see Value ) computed mean estimates across imputations using original coefficients averaged across imputations. , first, coefficients estimated models imputed datasets combined form single set pooled coefficients; , imputation, quantities interest computed using pooled coefficients; finally, mean resulting estimates across imputations taken \"original\" estimates. Note procedure valid quantities symmetric sampling distributions, excludes quantities like risk ratios odds ratios, includes log risk ratios log odds ratios. desired quantities can transformed log versions using transform().","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/sim_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to simulated parameter values — sim_apply","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- lm(re78 ~ treat + age + race + nodegree + re74,           data = lalonde) coef(fit) #>   (Intercept)         treat           age    racehispan     racewhite  #>  4596.7282858  1719.6323705    -6.5455292  1605.6558582  1338.9751895  #>      nodegree          re74  #> -1174.9861400     0.3855893   set.seed(123) s <- sim(fit, n = 100)  # Function to compare predicted values for two units # using `fit` argument sim_fun <- function(fit) {   pred1 <- unname(predict(fit, newdata = lalonde[1,]))   pred2 <- unname(predict(fit, newdata = lalonde[2,]))   c(pred1 = pred1, pred2 = pred2) }  est <- sim_apply(s, sim_fun, verbose = FALSE)  # Add difference between predicted values as # additional quantity est <- transform(est, `diff 1-2` = pred1 - pred2)  # Examine estimates and confidence intervals summary(est) #>          Estimate 2.5 % 97.5 % #> pred1        4899  3692   6116 #> pred2        6603  4972   8739 #> diff 1-2    -1704 -3802    297  # Function to compare coefficients using `coefs` # argument sim_fun <- function(coefs) {   c(`wh - his` = coefs[\"racewhite\"] - coefs[\"racehispan\"]) }  est <- sim_apply(s, sim_fun, verbose = FALSE)  # Examine estimates and confidence intervals summary(est) #>                    Estimate 2.5 % 97.5 % #> wh - his.racewhite     -267 -1745   1740"},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute predictions and first differences at set values — sim_setx","title":"Compute predictions and first differences at set values — sim_setx","text":"sim_setx() wrapper sim_apply() computes predicted values outcome specified values predictors, sometimes called marginal predictions. One can also compute difference two marginal predictions (\"first difference\"). Although function accepted clarify_est objects can used sim_setx() output objects, special plotting function, plot.clarify_setx(), can used plot marginal predictions.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute predictions and first differences at set values — sim_setx","text":"","code":"sim_setx(   sim,   x = list(),   x1 = list(),   outcome = NULL,   type = NULL,   verbose = TRUE,   cl = NULL )  # S3 method for clarify_setx print(x, digits = NULL, max.ests = 6, ...)"},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute predictions and first differences at set values — sim_setx","text":"sim clarify_sim object; output call sim() misim(). x named list values predictor take defining reference grid predictor values, e.g., list(v1 = 1:4, v2 = c(\"\", \"B\")). omitted predictors fixed \"typical\" value. See Details. x1 specified, x identify single reference unit. print(), clarify_setx object. x1 named list value predictor take compute first difference predictor combination specified x. x1 can identify single unit. See Details. outcome string containing name outcome outcome level multivariate (multiple outcomes) multi-category outcomes. Ignored univariate (single outcome) binary outcomes. type string containing type predicted values (e.g., link response). Passed marginaleffects::get_predict() eventually predict() cases. default allowable option depend type model supplied, almost always corresponds response scale (e.g., predicted probabilities binomial models). verbose logical; whether display text progress bar indicating progress estimated time remaining procedure. Default TRUE. cl cluster object created parallel::makeCluster(), integer indicate number child-processes (integer values ignored Windows) parallel evaluations. See pbapply::pblapply() details. NULL, parallelization take place. digits minimum number significant digits used; passed print.data.frame(). max.ests maximum number estimates display. ... optional arguments passed FUN.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute predictions and first differences at set values — sim_setx","text":"clarify_setx object, inherits clarify_est similar output sim_apply(), following additional attributes: \"setx\" - data frame containing values predictions made \"fd\" - whether first difference computed; set TRUE x1 specified FALSE otherwise","code":""},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute predictions and first differences at set values — sim_setx","text":"x named list predictor values crossed form reference grid marginal predictions. predictors set x assigned \"typical\" value, , factor, character, logical, binary variables mode, numeric variables mean, ordered variables median. values can seen \"setx\" attribute output object. x empty, prediction made point corresponding typical value every predictor. Estimates identified (summary(), etc.) variables differ across predictions. x1 supplied, first difference computed, considered difference two marginal predictions. One marginal prediction must specified x another, ideally single predictor changed, specified x1.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/sim_setx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute predictions and first differences at set values — sim_setx","text":"","code":"data(\"lalonde\", package = \"MatchIt\")  fit <- lm(re78 ~ treat + age + educ + married + race + re74,           data = lalonde)  # Simulate coefficients set.seed(123) s <- sim(fit, n = 100)  # Predicted values at specified values of treat, typical # values for other predictors est <- sim_setx(s, x = list(treat = 0:1,                             re74 = c(0, 10000)),                 verbose = FALSE) summary(est) #>                         Estimate 2.5 % 97.5 % #> treat = 0, re74 = 0         4771  3645   5841 #> treat = 1, re74 = 0         6389  4653   8147 #> treat = 0, re74 = 10000     8353  7106   9539 #> treat = 1, re74 = 10000     9971  8083  12092 plot(est)   # Predicted values at specified grid of values, typical # values for other predictors est <- sim_setx(s, x = list(age = c(20, 25, 30, 35),                             married = 0:1),                 verbose = FALSE) summary(est) #>                       Estimate 2.5 % 97.5 % #> age = 20, married = 0     6377  5314   7439 #> age = 25, married = 0     6395  5273   7424 #> age = 30, married = 0     6413  5216   7555 #> age = 35, married = 0     6431  5136   7700 #> age = 20, married = 1     7066  6000   8512 #> age = 25, married = 1     7084  6164   8266 #> age = 30, married = 1     7102  6249   8077 #> age = 35, married = 1     7120  6122   8226 plot(est)   # First differences of treat at specified value of # race, typical values for other predictors est <- sim_setx(s, x = list(treat = 0, race = \"hispan\"),                 x1 = list(treat = 1, race = \"hispan\"),                 verbose = FALSE) summary(est) #>           Estimate 2.5 % 97.5 % #> treat = 0     7054  5731   8592 #> treat = 1     8672  6403  11112 #> FD            1618   268   3078 plot(est)"},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference for clarify_est objects — plot.clarify_est","title":"Inference for clarify_est objects — plot.clarify_est","text":"summary() tabulates estimates confidence intervals (optionally) p-values clarify_est object. confint() computes confidence intervals.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference for clarify_est objects — plot.clarify_est","text":"","code":"# S3 method for clarify_est plot(x, parm, ci = TRUE, level = 0.95, method = \"quantile\", ...)  # S3 method for clarify_est summary(object, parm, level = 0.95, method = \"quantile\", null = NA, ...)  # S3 method for clarify_est confint(object, parm, level = 0.95, method = \"quantile\", ...)"},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference for clarify_est objects — plot.clarify_est","text":"parm vector names indices estimates plot. unspecified, estimates displayed. ci logical; whether display confidence interval limits estimates. Default TRUE. level confidence level desired. Default .95 95% confidence intervals. method method used compute p-values confidence intervals. Can \"wald\" use Normal approximation \"quantile\" use simulated sampling distribution (default). See Details. Abbreviations allowed. ... plot(), arguments passed ggplot2::geom_density(). object, x clarify_est object; output call sim_apply() wrappers. null values parameters null hypothesis p-value calculations. length equal number quantities estimated, one, case recycled. Set values NA omit p-values quantities. values NA, default, p-values produced.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference for clarify_est objects — plot.clarify_est","text":"summary(), summary.clarify_est object, matrix containing coefficient estimates, standard errors, test statistics, p-values, confidence intervals. columns present depending arguments supplied summary(). confint(), matrix containing confidence intervals requested quantities. plot(), ggplot object.","code":""},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inference for clarify_est objects — plot.clarify_est","text":"summary() uses estimates computed original model estimates uses simulated parameters inference . method = \"wald\", standard deviation simulation estimates used standard error, used z-statistics confidence intervals. p-values confidence intervals valid sampling distribution resulting statistic normal (can assessed using plot()). method = \"quantile\", confidence interval calculated using quantiles simulation estimates corresponding level, p-value calculated twice proportion simulation estimates less greater null, whichever smaller; equivalent inverting confidence interval truly valid true sampling distribution location shift sampling distribution null hypothesis therefore interpreted caution. Using \"method = \"quantile\" (default) recommended confidence intervals valid even sampling distribution Normally distributed. precision p-values confidence intervals depends number simulations requested (value n supplied sim()). plots produced using ggplot2::geom_density() can customized ggplot2 functions.","code":""},{"path":[]},{"path":"https://ngreifer.github.io/clarify/reference/summary.clarify_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference for clarify_est objects — plot.clarify_est","text":"","code":"data(\"lalonde\", package = \"MatchIt\") fit <- glm(I(re78 > 0) ~ treat + age + race + nodegree + re74,           data = lalonde)  s <- sim(fit, n = 100)  # Compute average marginal means for `treat` est <- sim_ame(s, var = \"treat\", verbose = FALSE) coef(est) #>   E[Y(0)]   E[Y(1)]  #> 0.7453346 0.8175754   # Compute average marginal effects on risk difference # (RD) and risk ratio (RR) scale est <- transform(est,                  RD = `E[Y(1)]` - `E[Y(0)]`,                  RR = `E[Y(1)]` / `E[Y(0)]`)  # Compute confidence intervals and p-values, # using given null values for computing p-values summary(est, null = c(NA, NA, 0, 1)) #>         Estimate   2.5 %  97.5 % P-value #> E[Y(0)]   0.7453  0.7051  0.7881       . #> E[Y(1)]   0.8176  0.7608  0.8900       . #> RD        0.0722 -0.0069  0.1630    0.14 #> RR        1.0969  0.9913  1.2282    0.14  # Same tests using normal approximation summary(est, null = c(NA, NA, 0, 1),         normal = TRUE) #>         Estimate   2.5 %  97.5 % P-value #> E[Y(0)]   0.7453  0.7051  0.7881       . #> E[Y(1)]   0.8176  0.7608  0.8900       . #> RD        0.0722 -0.0069  0.1630    0.14 #> RR        1.0969  0.9913  1.2282    0.14  # Plot the RD and RR plot(est, parm = c(\"RD\", \"RR\"))"},{"path":"https://ngreifer.github.io/clarify/news/index.html","id":"clarify-010","dir":"Changelog","previous_headings":"","what":"clarify 0.1.0","title":"clarify 0.1.0","text":"First release!","code":""}]
